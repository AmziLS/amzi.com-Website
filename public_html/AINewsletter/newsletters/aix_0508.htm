<html><!-- #BeginTemplate "/Templates/main_ss.dwt" --><!-- DW6 -->
<head>
<title>AI Newsletter</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<script language="JavaScript">
<!--
function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_nbGroup(event, grpName) { //v3.0
  var i,img,nbArr,args=MM_nbGroup.arguments;
  if (event == "init" && args.length > 2) {
    if ((img = MM_findObj(args[2])) != null && !img.MM_init) {
      img.MM_init = true; img.MM_up = args[3]; img.MM_dn = img.src;
      if ((nbArr = document[grpName]) == null) nbArr = document[grpName] = new Array();
      nbArr[nbArr.length] = img;
      for (i=4; i < args.length-1; i+=2) if ((img = MM_findObj(args[i])) != null) {
        if (!img.MM_up) img.MM_up = img.src;
        img.src = img.MM_dn = args[i+1];
        nbArr[nbArr.length] = img;
    } }
  } else if (event == "over") {
    document.MM_nbOver = nbArr = new Array();
    for (i=1; i < args.length-1; i+=3) if ((img = MM_findObj(args[i])) != null) {
      if (!img.MM_up) img.MM_up = img.src;
      img.src = (img.MM_dn && args[i+2]) ? args[i+2] : args[i+1];
      nbArr[nbArr.length] = img;
    }
  } else if (event == "out" ) {
    for (i=0; i < document.MM_nbOver.length; i++) {
      img = document.MM_nbOver[i]; img.src = (img.MM_dn) ? img.MM_dn : img.MM_up; }
  } else if (event == "down") {
    if ((nbArr = document[grpName]) != null)
      for (i=0; i < nbArr.length; i++) { img=nbArr[i]; img.src = img.MM_up; img.MM_dn = 0; }
    document[grpName] = nbArr = new Array();
    for (i=2; i < args.length-1; i+=2) if ((img = MM_findObj(args[i])) != null) {
      if (!img.MM_up) img.MM_up = img.src;
      img.src = img.MM_dn = args[i+1];
      nbArr[nbArr.length] = img;
  } }
}
//-->
</script>
<style type="text/css">
<!--
pre {  font-family: "Courier New", Courier, mono; background-color: #ccccff; margin-right: 20px; margin-left: 20px}
-->
</style>
</head>
<body bgcolor="#FFFFFF" text="#000000" onLoad="MM_preloadImages('/AINewsletter/images/menu_about.gif','/AINewsletter/images/menu_about_lite.gif')">
<table width="100%" border="0" cellpadding="15" bgcolor="#28B5F9">
  <tr><td>
      <table width="100%" border="0" cellpadding="10" bgcolor="white">
        <tr> 
          <td height="117"> 
            <table width="100%" border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td width="240"><a href="/index.html"><img src="/images/logo.gif" width="240" height="80" border="0"></a></td>
                <td valign="bottom" > 
                  <div align="right"> 
                    <h2><font color="navy" face="Arial, Helvetica, sans-serif"><!-- #BeginEditable "Title" -->August 
                      2005 <!-- #EndEditable --></font></h2>
                  </div>
                </td>
              </tr>
            </table>
            <table border="0" cellpadding="0" cellspacing="0" width="100%">
              <tr bgcolor="#000066"> 
                <td><a href="/AINewsletter/toc.html" onClick="MM_nbGroup('down','group1','Newsletters','/AINewsletter/images/menu_newsletters.gif',1)" onMouseOver="MM_nbGroup('over','Newsletters','/AINewsletter/images/menu_newsletters_lite.gif','',1)" onMouseOut="MM_nbGroup('out')"><img name="Newsletters" src="/AINewsletter/images/menu_newsletters.gif" border="0" onLoad="" width="165" height="25"></a></td>
                <td><a href="/AINewsletter/toc.html" onClick="MM_nbGroup('down','group1','Downloads','/AINewsletter/images/menu_downloads.gif',1)" onMouseOver="MM_nbGroup('over','Downloads','/AINewsletter/images/menu_downloads_lite.gif','',1)" onMouseOut="MM_nbGroup('out')"><img name="Downloads" src="/AINewsletter/images/menu_downloads.gif" border="0" onLoad="" width="165" height="25"></a></td>
                <td><a href="/AINewsletter/about.htm" onClick="MM_nbGroup('down','group1','About','/AINewsletter/images/menu_about.gif',1)" onMouseOver="MM_nbGroup('over','About','/AINewsletter/images/menu_about_lite.gif','',1)" onMouseOut="MM_nbGroup('out')"><img name="About" src="/AINewsletter/images/menu_about.gif" border="0" onLoad="" width="100" height="25"></a></td>
                <td><a href="/AINewsletter/contact.htm" onClick="MM_nbGroup('down','group1','Contact','/AINewsletter/images/menu_contact.gif',1)" onMouseOver="MM_nbGroup('over','Contact','/AINewsletter/images/menu_contact_lite.gif','',1)" onMouseOut="MM_nbGroup('out')"><img name="Contact" src="/AINewsletter/images/menu_contact.gif" border="0" onLoad="" width="120" height="25"></a></td>
                <td width="100%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                </td>
              </tr>
              <tr> 
                <td><img height="1" width="90" src="/AINewsletter/images/menu_spacer.gif"></td>
                <td></td>
              </tr>
            </table>
          </td>
        </tr>
        <tr> 
          <td><!-- #BeginEditable "Contents" --> 
            <H1>AI Expert Newsletter</H1>
            <p><i>AI - The art and science of making computers do interesting 
              things that are not in their nature.</i></p>
            <H3>August 2005</H3>
            <UL>
              <LI><A HREF="#introduction">Introduction </a></LI>
              <LI> <A HREF="#introduction"></a><A HREF="#iterative_spreadsheets">Iterative 
                Spreadsheets, Recurrent Neural Nets, Cellular Automaton Knitting, 
                and Relativistic Time Dilation</A> 
                <UL>
                  <LI><A HREF="#iterative_spreadsheets_links">Links</A></LI>
                </UL>
              </LI>
              <LI><A HREF="#koders">The Koders Source-code Search Engine</A> 
                <UL>
                  <LI><A HREF="#koders_links">Links</A></LI>
                </UL>
              </LI>
              <LI><A HREF="#real_programmers">Real Programmers</A> </LI>
              <LI><A HREF="#matrix_quadtrees">Matrix Algorithms using Quadtrees</A> 
                <UL>
                  <LI><A HREF="#matrix_quadtrees_links">Links</A></LI>
                </UL>
              </LI>
              <LI><A HREF="#python_ai">Python for AI and Logic Programming</A> 
                <UL>
                  <LI><A HREF="#python_ai_i1">The 800-pound gorilla versus a steaming 
                    pile of dinosaur dung</A></LI>
                  <LI><A HREF="#python_ai_i2">"I never understood why LISP was 
                    a good idea until I started playing with Python"</A></LI>
                  <LI><A HREF="#python_ai_implementations">Python implementations</A></LI>
                  <LI><A HREF="#python_ai_ai">AI in Python</A></LI>
                  <LI><A HREF="#python_ai_prolog">Prolog in Python - PyLog and 
                    Pylogic</A></LI>
                  <LI><A HREF="#python_ai_constraint">Constraint logic programming 
                    in Python</A></LI>
                  <LI><A HREF="#python_ai_rete">Production rules and the Rete 
                    algorithm in Python</A></LI>
                  <LI><A HREF="#python_ai_links">Links</A></LI>
                </UL>
              </LI>
              <LI><A HREF="#open_automaton">Open Automaton</A> 
                <UL>
                  <LI><A HREF="#open_automaton_links">Links</A></LI>
                </UL>
              </LI>
              <LI><A HREF="#squirrel">Common-sense Reasoning and the Anti-squirrel-nut-theft 
                Challenge</A></LI>
            </UL>
            <H2><A NAME="introduction">Introduction</A></H2>
            <P> A few months ago, I discovered the Python code repository for 
              the textbook <I>Artificial Intelligence: A Modern Approach</I> by 
              Peter Norvig and Stuart Russell. There's some good stuff there, 
              and this inspired me to find out what else Python had to offer AI. 
              A lot, is the answer, and that's the topic of this month's main 
              feature. If you have no interest in Python, I hope the examples 
              may still be useful as demonstrations of assorted AI techniques 
              and how they can be taught. Next month, I hope to continue this 
              with a look at Python in robotics. Until then, 
            <DIV ALIGN=right> <A HREF="http://www.j-paine.org/">Jocelyn Paine</A></DIV>
            <p></P>
            <P>&nbsp;</P>
            <H2><A NAME="iterative_spreadsheets">Iterative Spreadsheets, Recurrent 
              Neural Nets, Cellular Automaton Knitting, and Relativistic Time 
              Dilation</A></H2>
            <P> Simon Andersson mailed me about my assertions in our <A HREF="http://www.ainewsletter.com/newsletters/aix_0505.htm">May 
              Spreadsheet Issue</A> that Excel can't implement the iteration needed 
              for a Hopfield neural net, and can only simulate cellular automata 
              by displaying each generation separately. </P>
            <P> In fact, he says, if you tell Excel to allow circular references, 
              these can be implemented - as he did one idle Sunday afternoon five 
              years ago when he wrote a spreadsheet for Conway's game of <A HREF="http://www.math.com/students/wonders/life/life.html">Life</A>. 
              To follow this up, I searched the Web and found a page by <A HREF="http://www.ellerman.org/Davids-Stuff/AboutDavidEllerman.htm">David 
              Ellerman</A> about <A HREF="http://www.ellerman.org/Davids-Stuff/Maths/Math-on-SS/MathonS.htm"><I>Math 
              on Spreadsheets</I></A>. Ellerman says: 
            <BLOCKQUOTE> Since any algorithm of any sophistication requires circular 
              references and iterations, the trick is to use the fixed order of 
              recalculating cells during iteration (usually left to right across 
              columns, top to bottom down rows) and to construct an iteration 
              counter within the spreadsheet. With an iteration counter, the formulas 
              can distinguish between the initial iteration when the variables 
              are first given seeded values and the later iterations when the 
              variables use the results of earlier iterations. </BLOCKQUOTE>
            <p></P>
            <P> Ellerman demonstrates with several examples, including a basic 
              <A HREF="http://www.ellerman.org/Davids-Stuff/Maths/Math-on-SS/MathonS.htm#GameofLife">Life 
              spreadsheet</A>, a <A HREF="http://www.ellerman.org/Davids-Stuff/Maths/Math-on-SS/MathonS.htm#Glidergun">Life 
              Glidergun</A>, a <A HREF="http://www.ellerman.org/Davids-Stuff/Maths/Math-on-SS/MathonS.htm#GeneticAlgorithm">simple 
              genetic algorithm</A> (simple or not, it's an impressive spreadsheet), 
              and <A HREF="http://www.ellerman.org/Davids-Stuff/Maths/Math-on-SS/Kauffman/kauffmansheets.htm">spreadsheets 
              based on</A> <A HREF="http://www.santafe.edu/sfi/People/kauffman/">Stuart 
              Kauffman</A>'s book <I>At Home in the Universe</I>. </P>
            <P> During my search, I found two unusual links. Pati Taylor's <A HREF="http://www.knitting-and.com/knitting/tips/automaton.htm"><I>Cellular 
              Automaton Design</I></A> is a small Excel cellular automaton for 
              generating knitting patterns. This CA is one-dimensional; each generation 
              is one row of the spreadsheet, and corresponds to one row of yarn. 
              CA cells are stitches, their colour given by the state of the cell. 
              This is the first time I've seen CAs explained via knitting. </P>
            <P> The second is <A HREF="http://www.maths.nott.ac.uk/personal/gaj/">George 
              Jaroszkiewicz</A>'s <A HREF="http://xxx.soton.ac.uk/abs/gr-qc/0008022"><I>Causal 
              Implication and the Origin of Time Dilation</I></A>, which derives 
              qualitative equivalents of relativistic time dilation and the Lorentz-Fitzgerald 
              contraction by viewing the Universe as a cellular automaton. It's 
              God as the Eternal Knitter, stitching the Present to the upper surface 
              of the Past and propagating world-lines in coloured stitches, their 
              position determined via the rules of a 3-D cellular automaton. </P>
            <P> Since this is hard to depict in your average PDF file, Jaroszkiewicz 
              uses a one-dimensional CA as an example: 
            <BLOCKQUOTE> <A HREF="http://www.maths.nott.ac.uk/personal/gaj/papers.html">I 
              use a spreadsheet such as Excel</A> to discuss the time delays occurring 
              during the running of a cellular automaton (similar to Conways "Game 
              of Life") when initial data is organised in a manner resembling 
              data distributed over a moving frame of reference. The level of 
              mathematics is suitable for undergraduate or high school interest, 
              and helps to develop a knowledge of special relativity. </BLOCKQUOTE>
            <p></P>
            <P> He starts with an observer or "Theorist" standing outside the 
              space-time represented by the spreadsheet, at rest relative to the 
              frame of reference defined by the space and time axes of the CA 
              it contains. He then considers a second frame of reference moving 
              relative to this, meaning that its space and time axes are tilted 
              across the spreadsheet. The Theorist observes a line of lights (say) 
              moving with this frame; on the spreadsheet, these are represented 
              by a line of cells which runs parallel with the moving frame's space 
              axis. He runs the CA forward from this state (the notion of CA has 
              to be widened to permit this, allowing both past and future to determine 
              a neighbouring cell) and notes the earliest time in his frame at 
              which he can compute the next state of each light. From this, Jaroszkiewicz 
              gets a mapping between the two frames' time flows, and derives time 
              dilation. As Omar Khayam, who was a mathematician as well as a poet, 
              didn't quite say: once the moving finger of the Theorist has written 
              in a cell, it moves on and <I>never</I> rewrites that cell. </P>
            <H3><A NAME="iterative_spreadsheets_links">Links</A></H3>
            <P> <A HREF="http://www.math.com/students/wonders/life/life.html">www.math.com/students/wonders/life/life.html</A> 
              - <I>What is the Game of Life?</I>, by Paul Callahan. Explains Life, 
              with some really nice applets on which you can draw and run Life 
              patterns. </P>
            <P> <A HREF="http://www.ellerman.org/Davids-Stuff/Maths/Math-on-SS/MathonS.htm">www.ellerman.org/Davids-Stuff/Maths/Math-on-SS/MathonS.htm</A> 
              - David Ellerman's <I>Math on Spreadsheets</I>. Look also at his 
              <A HREF="http://www.ellerman.org/Davids-Stuff/Maths/Math.htm"><I>Math: 
              Pure and Applied</I></A> - this includes an <A HREF="http://www.ellerman.org/Davids-Stuff/Maths/Math.htm#Double-Entry">algebraic 
              formulation of double-entry bookkeeping</A> - and his <A HREF="http://www.ellerman.org/Davids-Stuff/AboutDavidEllerman.htm">home 
              page</A>, including <A HREF="http://www.ellerman.org/Davids-Stuff/Memos/Memos.htm"><I>Notes, 
              Memos, and Other Rants from the World Bank</I></A>. </P>
            <P> <A HREF="http://www.knitting-and.com/knitting/tips/automaton.htm">www.knitting-and.com/knitting/tips/automaton.htm</A> 
              - <I>Cellular Automaton Design</I>, by Pati Taylor. </P>
            <P> <A HREF="http://xxx.soton.ac.uk/abs/gr-qc/0008022">xxx.soton.ac.uk/abs/gr-qc/0008022</A> 
              - <I>Causal Implication and the Origin of Time Dilation</I>, by 
              George Jaroszkiewicz, University of Nottingham. His other papers 
              about discrete time are at <A HREF="http://www.maths.nott.ac.uk/personal/gaj/papers.html">www.maths.nott.ac.uk/personal/gaj/papers.html</A>, 
              and his home page is <A HREF="http://www.maths.nott.ac.uk/personal/gaj/">www.maths.nott.ac.uk/personal/gaj/</A>. 
            </P>
            <P>&nbsp;</P>
            <H2><A NAME="koders">The Koders Source-code Search Engine</A></H2>
            <P> I recently came across a blog entry announcing its author's discovery 
              of <A HREF="http://koders.com/">Koders</A>, a search engine designed 
              specially to look for open source code. To quote Koders's <A HREF="http://www.koders.com/info.aspx?c=GettingStarted"><I>Getting 
              Started</I></A> page: 
            <BLOCKQUOTE> 
              <P> A significant portion of application development involves a 
                process of find, copy, paste, and integrate. This process can 
                be greatly accelerated when you can find existing source code 
                that provides a solution to the task at hand. </P>
              <P> Koders makes it easy for software developers to find existing 
                source code that solves many common development problems with 
                our vast index of working source code from a variety of open source 
                projects. In many cases you may find code that solves the exact 
                problem you are working on, and in other cases, you can find an 
                80% solution - where existing code can be suited to your needs 
                with minor modifications. </P>
            </BLOCKQUOTE>
            <p></P>
            <P> This was interesting, so I did some experiments. I tried Koders 
              to see whether it could find the <A HREF="http://www.j-paine.org/programs.html">free 
              software</A> I've put on my Web site: specifically, my <A HREF="http://www.j-paine.org/Formatter/">Java 
              implementation of Fortran formats</A> and my <A HREF="http://www.j-paine.org/match.html">Kawa 
              pattern matcher</A>. (<A HREF="http://www.gnu.org/software/kawa/">Kawa</A> 
              is Per Bothner's Java implementation of Scheme.) It didn't find 
              either. In fact, Koders may not be set up to find Kawa code at all. 
              Its search form contains a menu of languages to search for, and 
              this doesn't include Kawa. There is an "All languages" option, but 
              it may not cover languages not in the other options. </P>
            <P> I then searched for AI source code I know to exist elsewhere: 
              the Bochum <A HREF="http://www.neuroinformatik.ruhr-uni-bochum.de/ini/VDM/research/gsn/DemoGNG/NG_2.html">neural-gas 
              applet</A> discussed in our <A HREF="http://www.ainewsletter.com/newsletters/aix_0506.htm">June 
              2005</A> issue; the Python function <A HREF="#enumerate_joint_ask">enumerate_joint_ask</A> 
              I exhibit in this month's <A HREF="#python_ai"><I>Python for AI 
              and Logic Programming</I></A> feature, which is on Norvig and Russell's 
              <A HREF="http://aima.cs.berkeley.edu/">site</A>; and Scott Bollland's 
              <A HREF="http://www2.psy.uq.edu.au/CogPsych/Copycat/">Copycat reimplementation</A> 
              at Queensland, which I wrote about last <A HREF="http://www.ainewsletter.com/newsletters/aix_0502.htm">February</A>. 
              None of these were found. </P>
            <P> Going on to a general search for utilities, I searched for "unify" 
              in Prolog. Surprisingly, Koders found nothing - unlike Google, which 
              turned up a number of files, from a copy of Mark Stickel's Prolog 
              Technology Theorem Prover to a course example used at Southampton 
              University. I then thought of a game - look for an algorithm in 
              the most unlikely language possible. Has anybody written a unifier 
              in Visual Basic? No. In Cold Fusion? No. In Perl? Yes ... except 
              it wasn't. All the "Perl" unifiers Koders found were in Prolog. 
              I suspect it guesses programming language from file extensions, 
              and therefore classifies <CODE>.pl</CODE> files as Perl even when 
              they're Prolog. </P>
            <P> Recently, I needed to invert some matrices in Prolog, so I tried 
              Koders to see how it might have helped. Could it find me matrix 
              inverters in other declarative languages, easily translatable to 
              Prolog? The functional language <A HREF="http://www.haskell.org/">Haskell</A> 
              is one possibility, but Koders doesn't have a Haskell language option. 
              There is one for Lisp, and here, Koders did find several useful 
              files. </P>
            <P> When Koders displayed the files it found, it obscured them with 
              a "nag curtain": an advert which one must click to remove. It would 
              be better to imitate Google, which manages to display both advertising 
              and search results, clearly, separately, and without nagging. </P>
            <P> I hope these remarks don't seem like carping. They do reflect 
              what I need from a source-code search engine, not least in finding 
              tasty software to write about in this Newsletter. It would be nice 
              if one could rely on Koders to index all the free courseware and 
              other code available at universities and similar organisations. 
              I should say that users with different needs have been very pleased 
              with Koders: in his blog, Scott Schram tells how amazingly useful 
              it was in his <A HREF="http://weblogs.java.net/blog/scottschram/archive/2005/04/koderscom_searc.html">quest 
              for a Java FilenameFilter</A>. And he also mentions one unusual 
              feature: Koders will not only tell you the size of the code it finds, 
              but will also estimate the cost of re-implementing it from scratch. 
            </P>
            <H3><A NAME="koders_links">Links</A></H3>
            <P> <A HREF="http://koders.com/">koders.com/</A> - Koders. </P>
            <P> <A HREF="http://weblogs.java.net/blog/scottschram/archive/2005/04/koderscom_searc.html">weblogs.java.net/blog/scottschram/archive/2005/04/koderscom_searc.html</A> 
              - <I>koders.com Searches Open Source Projects</I>, by Scott Schram. 
              Blog entry about searching for a FilenameFilter. </P>
            <P> <A HREF="http://www.socaltech.com/fullstory/0002028.html">www.socaltech.com/fullstory/0002028.html</A> 
              - Interview with Jorn Teutloff, a co-founder of Koders. </P>
            <P>&nbsp;</P>
            <H2><A NAME="real_programmers">Real Programmers</A></H2>
            <P> 
            <BLOCKQUOTE> Real programmers don't comment their code. If it was 
              hard to write, it should be hard to read. </BLOCKQUOTE>
            From <A HREF="http://www.guidenet.net/resources/programmers.html">www.guidenet.net/resources/programmers.html</A> 
            and many other sites. 
            <p></P>
            <P>&nbsp;</P>
            <H2><A NAME="matrix_quadtrees">Matrix Algorithms using Quadtrees</A></H2>
            <P> While comparing Koders with Google, I came across a paper by David 
              Wise on <A HREF="http://www.cs.indiana.edu/pub/techreports/TR357.pdf"><I> 
              Matrix Algorithms using Quadtrees</I></A>. Perhaps it will interest 
              those implementing efficient functional or logic-based versions 
              of some array algorithms. The excerpt below is from the Introduction. 
              Since the paper mentions APL, I've included some links explaining 
              that too. As spreadsheet and Linux expert <A HREF="http://linuxfinances.info/info/total.html">Chris 
              Browne</A> once told me, APL's rich variety of array operations 
              may be useful inspiration for programmers processing array-like 
              structures in other languages and trying to decide on suitable primitive 
              operations: 
            <BLOCKQUOTE> 
              <P> Iverson built many novel attributes into APL; almost all of 
                them appeared in other languages since then. Interactive dialog, 
                novel in the era of batch processing, is now necessary to personal 
                - and personalized - computers. Overloading of operators not only 
                is one of the pillars of Object Oriented Programming, but also 
                has been extensively analyzed in the development of polymorphic 
                type checkers, as in ML or Haskell, for instance. A significant 
                contribution from APL is its rich vocabulary for array operations, 
                which has become the heritage of this meeting. </P>
              <P> From the pure-functional programming camp I come to assail some 
                constraining prejudices that are part of that heritage: APL's 
                aggregate/matrix operations that, regrettably, focus on row/column 
                decomposition. If one asserts, since the underlying model for 
                memory in a modern computer is an array, that row- or vector-processing 
                is closest to "natural" computation, I want to undo that prejudice, 
                as well. My model of memory is a heap of relatively small nodes, 
                linked into trees, dags, and graphs. </P>
              <P> Lucid expression of parallelism requires a comfortable vocabulary 
                and style formapping functions. Mapping or "spreading" of application 
                across data structure is the best applicative analog of parallelism, 
                and is particularly important in a functional language because 
                the mapped function is necessarily independent in all its applications. 
                (Collateral argument evaluation is the simplest and most common 
                case of such mapping.) When mapping occurs early in the divide-and-conquer 
                decomposition of a problem, each application represents a desirably 
                large granule of computation that can be further mapped. APL maps 
                across arrays, which is insufficient; Haskell maps (or (cringe) 
                <CODE>zipWith3s</CODE>) only across lists; this is also too weak. 
                The most important target for mapping is homogeneous tuples of 
                relatively small size, so to control the growth of parallelism 
                and the scheduling problem. Much is done here with fourples. </P>
              <P> My task is to propose and to justify a new approach to an old 
                algorithm, Gaussian elimination|an essential result from matrix 
                algebra. While the performance of this algorithm won't beat a 
                Cray so far, it has ample opportunities formultiprocessing, for 
                distributed processing, for algebraic transformation, and even 
                for partial evaluation; that is, it exhibits lots of structured 
                opportunities for massive parallelism, just as we expect from 
                a functional program. The challenge is to express array algorithms 
                like this in your favorite array language. Since the principal 
                data structure is a quaternary tree and no row or column operations 
                are used, vector operations may be useless. Block decomposition 
                and block arithmetic are important; sometimes blocks carry other 
                decorations, aside from their constituent elements. </P>
            </BLOCKQUOTE>
            <p></P>
            <H3><A NAME="matrix_quadtrees_links">Links</A></H3>
            <P> <A HREF="http://www.cs.indiana.edu/pub/techreports/TR357.pdf">www.cs.indiana.edu/pub/techreports/TR357.pdf</A> 
              - <I>Matrix Algorithms using Quadtrees</I>, by David Wise, Indiana. 
            </P>
            <P> <A HREF="http://www.acm.org/sigs/sigapl/links.htm">www.acm.org/sigs/sigapl/links.htm</A> 
              - The ACM Special Interest Group resource pages for APL and J. Links 
              include <A HREF="http://www.cs.trinity.edu/~jhowland/">John Howland</A>'s 
              <A HREF="http://www.cs.trinity.edu/About/The_Courses/cs301/"><I>Great 
              Ideas in Computer Science</I></A> course, with copious course examples 
              in both Scheme and the J dialect of APL. </P>
            <P> <A HREF="http://www.cs.trinity.edu/Other_Attractions/j.html/">www.cs.trinity.edu/Other_Attractions/j.html/</A> 
              - <I>About J</I>. </P>
            <P> <A HREF="http://www.vector.org.uk/archive/v213/">www.vector.org.uk/archive/v213/</A> 
              - Current issue of <I>Vector</I>, Journal of the British APL Association. 
              Includes a feature on <A HREF="http://www.vector.org.uk/archive/v213/ifp.htm">industrial 
              functional programming</A> by Stephen Taylor in which he asks "does 
              FP remain an academic fad, a cunning trick - look, Ma, no variables? 
              What can we take and use from FP, and how might it help us in everyday 
              programming?" Not many articles conclude as he does that "refactoring 
              was a snack". </P>
            <P> <A HREF="http://www.ics.uci.edu/~eppstein/gina/quadtree.html">www.ics.uci.edu/~eppstein/gina/quadtree.html</A> 
              - <I>Quadtrees and Hierarchical Space Decomposition</I>, by David 
              Eppstein, Irvine. Introduction to quadtrees and their applications. 
            </P>
            <P>&nbsp;</P>
            <H2><A NAME="python_ai">Python for AI and Logic Programming</A></H2>
            <H3><A NAME="python_ai_i1">The 800-pound gorilla versus a steaming 
              pile of dinosaur dung</A></H3>
            <P> Let's start right away with an example of Python, from the <A HREF="http://www.python.org/doc/Introduction.html">introduction 
              to Python</A> at <A HREF="http://www.python.org/">www.python.org/</A>. 
              Here's a function which inverts a mapping stored in the lookup table 
              - or dictionary, as Python calls it - <CODE>table</CODE>: 
            <PRE>

  def invert(table):

    index = {}                # empty dictionary

    for key in table.keys():

        value = table[key]

        if not index.has_key(value):

            index[value] = [] # empty list

        index[value].append(key)

    return index

</PRE>
            <p></P>
            <P> As one might guess from the syntax, Python has lists and dictionaries 
              built in, providing building blocks for a variety of standard algorithms. 
              It's also easy to read. This is partly because of the way Python 
              handles indentation. The language does not use <CODE>begin</CODE>...<CODE>end</CODE> 
              or <CODE>{</CODE>...<CODE>}</CODE> brackets. Instead, the compiler 
              infers nesting from indentation. This lack of brackets reduces visual 
              clutter, and forces programmers to make their indentation reflect 
              code structure, thus aiding legibility. </P>
            <P> Python, which has strings, regular expression matching, classes, 
              and all the other features found in today's imperative programming 
              languages, can be used as a "scripting language", for the same kind 
              of jobs as Perl. In <A HREF="http://www.linuxjournal.com/article/3882"><I>Why 
              Python?</I></A>, Eric Raymond tells how, when O'Reilly sent him 
              Mark Lutz's book <I>Programming Python</I>, he dived into it to 
              find out what Python had that Perl, the "800-pound gorilla" of scripting 
              languages, did not. On encountering Python's indentation-based bracketing, 
              he reacted at first as though he had stepped in a steaming pile 
              of dinosaur dung. In comparison with Perl, Python seemed to have 
              nothing special to offer. However, as he found himself working on 
              a sequence of large and complicated Perl programs: 
            <BLOCKQUOTE> 
              <P> Writing these programs left me progressively less satisfied 
                with Perl. Larger project size seemed to magnify some of Perl's 
                annoyances into serious, continuing problems. The syntax that 
                had seemed merely eccentric at a hundred lines began to seem like 
                a nigh-impenetrable hedge of thorns at a thousand. "More than 
                one way to do it" lent flavor and expressiveness at a small scale, 
                but made it significantly harder to maintain consistent style 
                across a wider code base. And many of the features that were later 
                patched into Perl to address the complexity-control needs of bigger 
                programs (objects, lexical scoping, "use strict", etc.) had a 
                fragile, jerry-rigged feel about them. </P>
              <P> These problems combined to make large volumes of Perl code seem 
                difficult to read and grasp as a whole after only a few days' 
                absence. Also, I found I was spending more and more time wrestling 
                with artifacts of the language rather than my application problems. 
                And, most damning of all, the resulting code was ugly--this matters. 
                Ugly programs are like ugly suspension bridges: they're much more 
                liable to collapse than pretty ones, because the way humans (especially 
                engineer-humans) perceive beauty is intimately related to our 
                ability to process and understand complexity. A language that 
                makes it hard to write elegant code makes it hard to write good 
                code. </P>
            </BLOCKQUOTE>
            <p></P>
            <H3><A NAME="python_ai_i2">"I never understood why LISP was a good 
              idea until I started playing with Python"</A></H3>
            <P> Peter Norvig gives an interesting account of Python in <A HREF="http://www.norvig.com/python-lisp.html"><I>Python 
              for Lisp Programmers</I></A>. He states that Python can be seen 
              as a dialect of Lisp with infix syntax. It supports all Lisp's essential 
              features except <A HREF="http://www.norvig.com/python-lisp.html#macros">macros</A>; 
              but you can make up for this lack by using eval, operator overloading, 
              and regular expression parsing. This makes it easy to create "little 
              languages" for constructing complicated data structures, something 
              I'll mention again later. </P>
            <P> This and other features lead Norvig to conclude that Python is 
              an excellent language for teaching - although it has little compile-time 
              error-checking, and is slow. In general, 
            <BLOCKQUOTE> Python has the philosophy of making sensible compromises 
              that make the easy things very easy, and don't preclude too many 
              hard things. In my opinion it does a very good job. The easy things 
              are easy, the harder things are progressively harder, and you tend 
              not to notice the inconsistencies. Lisp has the philosophy of making 
              fewer compromises: of providing a very powerful and totally consistent 
              core. This can make Lisp harder to learn because you operate at 
              a higher level of abstraction right from the start and because you 
              need to understand what you're doing, rather than just relying on 
              what feels or looks nice. But it also means that in Lisp it is easier 
              to add levels of abstraction and complexity; Lisp makes the very 
              hard things not too hard. </BLOCKQUOTE>
            <p></P>
            <H3><A NAME="python_ai_implementations">Python implementations</A></H3>
            <P> The main implementation is that at <A HREF="http://www.python.org/">www.python.org/</A>, 
              where you can also find tutorials and reference documentation. There's 
              also <A HREF="http://www.stackless.com/">Stackless Python</A>, based 
              on the idea that Python should support <A HREF="http://www.sidhe.org/~dan/blog/archives/000178.html">coroutines</A>, 
              which are easier to program with than threads. And there are <A HREF="http://www.ironpython.com/">IronPython 
              for the .NET and Mono platforms</A>, and <A HREF="http://www.jython.org/">Jython</A>, 
              written in Java and compilable to JVM code. While, as Norvig says, 
              Python doesn't satisfy the prerequisite of being spelled J-A-V-A, 
              Jython is close. I would add that it is also a convenient way to 
              run pieces of Java code interactively, useful when testing and debugging 
              Java. </P>
            <H3><A NAME="python_ai_ai">AI in Python</A></H3>
            <P> In <A HREF="http://programmer-art.org/dan/python-ai.html"><I>Python 
              Applications in Artificial Intelligence Research</I></A>, Daniel 
              Taylor gives an assortment of links to AI software in Python. Some 
              of it, such as the <A HREF="http://www.strout.net/python/ai/therapist.py">Therapist</A> 
              reimplementation of <A HREF="http://i5.nyu.edu/~mm64/x52.9265/january1966.html">Eliza</A>, 
              won't interest the serious AI-er; however, such programs can be 
              very good for teaching, and would fit well with Python's legibility. 
              For AI students with no programming experience, being invited to 
              extend a computer conversation program via small additions to its 
              lexicon and pattern-matching rules is not a bad introduction to 
              such things as text editors, operating-system commands, and the 
              need for compilation. More seriously, Taylor mentions the Python 
              interface to <A HREF="http://www.signiform.com/tt/htm/tt.htm">ThoughtTreasure</A>'s 
              ontology and lexical knowledge base. </P>
            <P> A bigger resource, and the main one I want to mention in this 
              section, is Norvig and Russell's textbook <A HREF="http://aima.cs.berkeley.edu/"><I>Artificial 
              Intelligence: A Modern Approach</I></A>. Although the book isn't 
              available online, most of the code is, in both <A HREF="http://aima.cs.berkeley.edu/lisp/doc/overview.html">Lisp</A> 
              and <A HREF="http://aima.cs.berkeley.edu/python/readme.html">Python</A>. 
              (There is also a <A HREF="http://aima.cs.berkeley.edu/java-overview.html">Java</A> 
              version.) </P>
            <P> The authors say that neither version is complete, though the Lisp 
              is more so. However, there's still a lot there, including agents 
              and their environments, search, games, probability models and Markov 
              processes, machine learning, chart parsers, and statistical language 
              processing. The contents also mentions planning, but in fact, as 
              the Lisp page explains, you won't find any code for this. Norvig 
              and Russell recommend using the University of Washington <A HREF="http://www.cs.washington.edu/ai/ucpop.html">UCPOP</A> 
              planner. </P>
            <P> To demonstrate the coding style, here's an excerpt from <A HREF="http://aima.cs.berkeley.edu/python/probability.py">the 
              code for probability models</A>, used in Chapters 13 to 15: <A NAME="enumerate_joint_ask"></A> 
            <PRE>

  def enumerate_joint_ask(X, e, P):

      """Return a probability distribution over the values of the variable X,

      given the {var:val} observations e, in the JointProbDist P. 

      Works for Boolean variables only. [Fig. 13.4]"""

      Q = ProbDist(X) ## A probability distribution for X, initially empty

      Y = [v for v in P.variables if v != X and v not in e]

      for xi in P.values(X):

          Q[xi] = enumerate_joint(Y, extend(e, X, xi), P)

      return Q.normalize()



  def enumerate_joint(vars, values, P):

      "As in Fig 13.4, except x and e are already incorporated in values."

      if not vars: 

          return P[values] 

      Y = vars[0]; rest = vars[1:]

      return sum([enumerate_joint(rest, extend(values, Y, y), P) 

                  for y in P.values(Y)])

</PRE>
            The functions are well commented and the code is easy to read. 
            <p></P>
            <P> The excerpt below, which defines the class of Bayesian nets and 
              creates an instance, shows how legible the constructors for these 
              complicated structures can be: 
            <PRE>

  class BayesNet:

      def __init__(self, nodes=[]):

          update(self, nodes=[], vars=[])

          for node in nodes:

              self.add(node)



      def add(self, node):

          self.nodes.append(node)

          self.vars.append(node.variable)



      def observe(self, var, val):

          self.evidence[var] = val



  class BayesNode:

      def __init__(self, variable, parents, cpt):

          if isinstance(parents, str): parents = parents.split()

          update(self, variable=variable, parents=parents, cpt=cpt)



  node = BayesNode





  T, F = True, False



  burglary = BayesNet([

    node('Burglary', '', .001), 

    node('Earthquake', '', .002),

    node('Alarm', 'Burglary Earthquake', {

                      (T, T):.95,

                      (T, F):.94,

                      (F, T):.29,

                      (F, F):.001}),

    node('JohnCalls', 'Alarm', {T:.90, F:.05}),

    node('MaryCalls', 'Alarm', {T:.70, F:.01})

    ])

</PRE>
            Bayes nets are one place where we want concise constructors; another 
            is in parsing, for grammars and lexica. Look at the <A HREF="http://aima.cs.berkeley.edu/python/nlp.py">chart 
            parser</A> of Chapter 22, and you will see that its data too is easy 
            to read. 
            <p></P>
            <H3><A NAME="python_ai_prolog">Prolog in Python - PyLog and Pylogic</A></H3>
            <P> Now for some logic programming. <A HREF="http://christophe.delord.free.fr/en/pylog/">PyLog</A> 
              is Christophe Delord's Python logic library and Prolog engine. Here's 
              one of his examples: 
            <PRE>

  from pylog import *



  class f(Term): pass

  class g(Term): pass



  print "Simple unification"

  X = Var('X')

  Y = Var('Y')

  a = f(X,g(Y,2))

  b = f(g(1,2),X)

  print "\tBefore unification"

  print "\t\ta =", a

  print "\t\tb =", b

  u = mgu(a,b)

  print "\t\tmgu(a,b) =", u

  u.unify()

  print "\tAfter unification"

  print "\t\ta =", a

  print "\t\tb =", b

</PRE>
            which displays 
            <PRE>

  Simple unification

  	  Before unification

		  a = f(X,g(Y,2))

		  b = f(g(1,2),X)

		  mgu(a,b) = 1/Y g(Y,2)/X

	  After unification

		  a = f(g(1,2),g(1,2))

		  b = f(g(1,2),g(1,2))

</PRE>
            This demonstrates how to call PyLog from Python. It assumes you're 
            familiar with <I>logical variables</I> and <I>unification</I>. For 
            those who aren't, unification is a kind of pattern matching, which 
            tries to lay trees - such as those representing the expressions <CODE>f(X,g(Y,2))</CODE> 
            and <CODE>f(g(1,2),X)</CODE> above - side by side and match up structurally 
            similar subexpressions. Trees can contain logical variables, such 
            as <CODE>X</CODE> and <CODE>Y</CODE>: these represent "holes" into 
            which matching subtrees can be slotted. 
            <p></P>
            <P> Logical variables and unification are an integral part of the 
              Prolog language, and PyLog contains a Prolog compiler. This can 
              read its input from a Python string: 
            <PRE>

  from pylog import *



  exec(compile(r"""



  likes('sam',Food) :-

          indian(Food),

          mild(Food).

  likes('sam',Food) :-

          chinese(Food).

  likes('sam','chips').



  indian('curry').

  indian('tandoori').

  indian('kurma').



  mild('tandoori').

  mild('kurma').



  chinese('chop_suey').



  """))



  WHO, WHAT = Var('WHO'), Var('WHAT')

  queries =	[

				  likes('sam','chop_suey'),

				  likes('sam','chips'),

				  likes('sam','curry'),

				  likes(WHO,WHAT),

			  ]



  for query in queries:

	  print "?", query

	  n=0

	  for _ in query():

		  print "\tyes:", query

		  n += 1

	  if n==0:

		  print "\tno"

</PRE>
            which displays 
            <PRE>

  ? likes(sam,chop_suey)

	  yes: likes(sam,chop_suey)

  ? likes(sam,chips)

	  yes: likes(sam,chips)

  ? likes(sam,curry)

	  no

  ? likes(WHO,WHAT)

	  yes: likes(sam,tandoori)

	  yes: likes(sam,kurma)

	  yes: likes(sam,chop_suey)

	  yes: likes(sam,chips)

</PRE>
            As the end of this example shows, once you've compiled PyLog Prolog, 
            you can submit queries. 
            <p></P>
            <P> The PyLog page doesn't explain how PyLog works, other than that 
              the Prolog engine uses the <A HREF="http://linuxgazette.net/100/pramode.html">generators</A> 
              introduced with Python 2.2. It also says that backtracking over 
              a cut works wrongly, in that it doesn't undo unifications done before 
              the cut, something hard to fix with the current structure of PyLog. 
              Delord invites collaborators to help improve PyLog: anyone doing 
              so will find his code to be nicely written and easy to read. </P>
            <P> Another almost-Prolog is Francisco Coelho's <A HREF="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/360698">Pythologic</A>. 
              This is based on a <A HREF="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/303057">logic-programming 
              system</A> by Shai Berger, extended with logical resolution. I don't 
              think Pythologic can do as much as PyLog, but it's interesting in 
              that it tries to provide Prolog syntax in Python itself, rather 
              than hiding it inside Python strings. Shai Berger explains at the 
              end of his posting that this involves some ingenious metaprogramming, 
              "wildly unpythonic, in its abusive overhaul of the function semantics". 
            </P>
            <H3><A NAME="python_ai_constraint">Constraint logic programming in 
              Python</A></H3>
            <P> The French company <A HREF="http://www.logilab.fr/">Logilab</A>, 
              as their home page explains, number Python and logic programming 
              amongst their specialities. They maintain a <A HREF="http://www.logilab.org/">repository 
              of free software</A>, which contains their <A HREF="http://www.logilab.org/projects/constraint">Constraint</A> 
              constraint-satisfaction package. </P>
            <P> They have the following example. You're organising an international 
              Python event, and need to schedule 10 different conferences within 
              it. The event lasts for 2 days, you have 3 conference rooms available, 
              and the length of conferences means you can hold at most two per 
              day in any given room. Conferences 3, 4, 5 and 6 must take place 
              in room C (it's the only one with Internet access). Conferences 
              1, 5 and 10 must take place on day 1, because their speakers are 
              only available then. Similarly, conferences 2, 3 4 and 9 can only 
              take place on day 2. Finally, some delegates want to attend specific 
              conferences, so these can't take place at the same time. Specifically, 
              one group of delegates wants to attend conferences 1, 2, 3 and 10, 
              so these must not happen at the same time; nor must conferences 
              2, 6, 8 and 9; conferences 3, 5, 6 and 7; or conferences 1, 3, 7 
              and 8. </P>
            <P> To specify this problem to a constraint solver, we start by creating 
              10 <I>variables</I>, one for each conference. Don't confuse these 
              with Python variables, though you'll probably have both in the program; 
              they're more like the logical variables mentioned earlier. We want 
              the solver to find a time and a room for each of these variables, 
              satisfying the constraints. In other words, the solver must find 
              a <I>value</I> for each variable, where the value is a pair consisting 
              of a time and a room. </P>
            <P> We start by importing the solver and then creating the variables, 
              which the solver represents as names: 
            <PRE>

  from logilab.constraint import *



  variables = ('c01','c02','c03','c04','c05','c06','c07','c08','c09','c10')

</PRE>
            <p></P>
            <P> We then create a list of possible values, that is, of all possible 
              time-room combinations. We can do so very concisely using Python's 
              "list comprehension" syntax: 
            <PRE>

  values = [(room,slot) 

            for room in ('room A','room B','room C') 

            for slot in ('day 1 AM','day 1 PM','day 2 AM','day 2 PM')]

</PRE>
            <p></P>
            <P> Any constraint solver needs to know what possible values each 
              variable can take. We tell it this by associating each variable 
              with a <I>domain</I>, or class of possible values. For this solver, 
              we do this by creating a mapping from variable name to domain. The 
              mapping is stored in a Python <I>dictionary</I>, here called <CODE>domains</CODE>. 
              Domains are represented as instances of class <CODE>fd.FiniteDomain</CODE>, 
              and created by invoking the class's instance constructor with the 
              list of values created above: 
            <PRE>

  domains = {}

  for v in variables:

      domains[v]=fd.FiniteDomain(values)

</PRE>
            <p></P>
            <P> Now we tell the solver the constraints. These are instances of 
              a class created by calling the function <CODE>fd.make_expression</CODE>, 
              passing it a list of the variables the constraint affects, and an 
              expression that evaluates to true if the constraint is satisfied. 
              The first constraint is the one that some conferences can only take 
              place in Room C: 
            <PRE>

  constraints = []

  for conf in ('c03','c04','c05','c06'):

      constraints.append(fd.make_expression((conf,),

                                            "%s[0] == 'room C'"%conf))

</PRE>
            <p></P>
            <P> Similarly, some speakers can only attend on day 1 or day 2: 
            <PRE>

  for conf in ('c01','c05','c10'):

      constraints.append(fd.make_expression((conf,),

                                            "%s[1].startswith('day 1')"%conf))

  for conf in ('c02','c03','c04','c09'):

      constraints.append(fd.make_expression((conf,),

                                            "%s[1].startswith('day 2')"%conf))

</PRE>
            <p></P>
            <P> Some conferences must not happen at the same time as other conferences: 
            <PRE>

  groups = (('c01','c02','c03','c10'),

            ('c02','c06','c08','c09'),

            ('c03','c05','c06','c07'),

            ('c01','c03','c07','c08'))

  for g in groups:

      for conf1 in g:

          for conf2 in g:

              if conf2 > conf1:

                  constraints.append(fd.make_expression((conf1,conf2),

                                                        '%s[1] != %s[1]'%\

                                                          (conf1,conf2)))

</PRE>
            <p></P>
            <P> And no two conferences can happen in the same room at the same 
              time: 
            <PRE>

  for conf1 in variables:

      for conf2 in variables:

          if conf2 > conf1:

              constraints.append(fd.make_expression((conf1,conf2),

                                                    '%s != %s'%(conf1,conf2)))

</PRE>
            <p></P>
            <P> We're now ready to solve the problem. This entails creating a 
              <CODE>Repository</CODE> to hold the variables, domains and constraints, 
              and a <CODE>Solver</CODE> object to solve the problem: 
            <PRE>

  r = Repository(variables,domains,constraints)

  solutions = Solver().solve(r)

  print solutions

</PRE>
            There are constraint-logic languages that will express such problems 
            more concisely, with more error-checking, and as pure logic. However, 
            as an embedding of constraint logic in an imperative programming language, 
            the above is not too painful. 
            <p></P>
            <H3><A NAME="python_ai_rete">Production rules and the Rete algorithm 
              in Python</A></H3>
            <P> As my final logic-programming example, I want to mention the <A HREF="http://www.cis.temple.edu/~ingargio/cis587/readings/rete.html">Rete 
              algorithm</A>. This is a method of optimising <A HREF="http://www.j-paine.org/students/lectures/lect4/node6.html">conflict 
              resolution</A> in forward-chaining rule-based systems: that is, 
              of deciding rapidly, when you have perhaps many hundreds of rules 
              that can match your data, which is the most appropriate. </P>
            <P> In a <A HREF="http://lists.logilab.org/pipermail/python-logic/2005-May/000109.html">Python-logic 
              posting</A>, Nicolas Chauvat announces the <A HREF="http://www.mindswap.org/~katz/pychinko/">Pychinko</A> 
              Rete-based RDF friendly rule engine. This emulates <A HREF="http://infomesh.net/2001/cwm/">CWM</A>, 
              the Closed World Machine forward-chaining inference engine for semantic 
              Web data. Pychinko's authors <A HREF="http://www.mindswap.org/~katz/pychinko-foaf-camp.html">explain 
              that</A> CWM is slow; CWM is <I>very</I> slow; CWM is <B>uberslow!</B> 
              With Pychinko, they aim to provide a cleaner, faster, implementation, 
              based on the Rete algorithm. </P>
            <P> Should one always go first for Python when choosing a programming 
              language? Of course not. Many factors influence your choice. But 
              as Yoda says in <A HREF="http://www.netfunny.com/rhf/jokes/99/Nov/perl.html"><I>A 
              morality tale of Perl versus Python</I></A> as he replies to Luke 
              Skywalker's question "But how will I know why Python is better than 
              Perl?": 
            <BLOCKQUOTE> You will know. When your code you try to read six months 
              from now. </BLOCKQUOTE>
            <p></P>
            <H3><A NAME="python_ai_links">Links</A></H3>
            <H4>General Python stuff</H4>
            <P> <A HREF="http://www.python.org/">www.python.org/</A> - Python. 
            </P>
            <P> <A HREF="http://www.stackless.com/">www.stackless.com/</A> - Stackless 
              Python. </P>
            <P> <A HREF="http://www.onlamp.com/pub/a/python/2000/10/04/stackless-intro.html">www.onlamp.com/pub/a/python/2000/10/04/stackless-intro.html</A> 
              - <I>Introduction to Stackless Python</I>, by Cameron Laird. </P>
            <P> <A HREF="http://www.jython.org/">www.jython.org/</A> - Jython. 
            </P>
            <P> <A HREF="http://www.ironpython.com/">www.ironpython.com/</A> - 
              IronPython. </P>
            <P> <A HREF="http://wiki.python.org/moin/LanguageComparisons">wiki.python.org/moin/LanguageComparisons</A> 
              - <I>Language Comparisons</I>. Links to comparisons of Python with 
              other languages. Includes a link to Lutz Prechelt's <A HREF="http://page.mi.fu-berlin.de/~prechelt/Biblio/jccpprtTR.pdf"><I>An 
              Empirical Comparison of C, C++, Java, Perl, Python, Rexx, and Tcl 
              for a Search/String-Processing Program</I></A>. </P>
            <P> <A HREF="http://www.norvig.com/python-lisp.html">www.norvig.com/python-lisp.html</A> 
              - <I>Python for Lisp Programmers</I>, by Peter Norvig. </P>
            <P> <A HREF="http://www.linuxjournal.com/article/3882">www.linuxjournal.com/article/3882</A> 
              - <I>Why Python?</I>, by Eric Raymond. </P>
            <P> <A HREF="http://www.artima.com/intv/python.html">www.artima.com/intv/python.html</A> 
              - <I>The Making of Python</I>. A conversation with Python's creator 
              Guido van Rossum, by Bill Venners. </P>
            <P> <A HREF="http://www.netfunny.com/rhf/jokes/99/Nov/perl.html">www.netfunny.com/rhf/jokes/99/Nov/perl.html</A> 
              - <I>A morality tale of Perl versus Python</I>. A scene from <I>The 
              Empire Strikes Back</I>, reinterpreted to serve a valuable moral 
              lesson for Perl and Python programmers. </P>
            <P> <A HREF="http://linuxgazette.net/100/pramode.html">linuxgazette.net/100/pramode.html</A> 
              - <I>Python Generator Tricks</I>, by Pramode C.E. Demonstrates a 
              few simple programs which use generators to do things such as filtering 
              out prime numbers, representing an infinite series expansion, and 
              applying the Euler "accelerator" to make a series converge more 
              repidly. </P>
            <P> <A HREF="http://www.ps.uni-sb.de/~duchier/python/continuations.html">www.ps.uni-sb.de/~duchier/python/continuations.html</A> 
              - <I>Continuations Made Simple and Illustrated</I>, by Denys Duchier. 
              Posted in response to discussion on comp.lang.python, this explains 
              continuations, how to implement them in Python, and their use in 
              implementing generators and Prolog-style search. </P>
            <H4>AI in Python</H4>
            <P> <A HREF="http://programmer-art.org/dan/python-ai.html">programmer-art.org/dan/python-ai.html</A> 
              - <I>Python Applications in Artificial Intelligence Research</I>, 
              by Daniel Taylor. </P>
            <P> <A HREF="http://aima.cs.berkeley.edu/">aima.cs.berkeley.edu/</A> 
              - <I>Artificial Intelligence: A Modern Approach</I>. </P>
            <H4>Logic programming in Python</H4>
            <P> <A HREF="http://lists.logilab.org/mailman/listinfo/python-logic">lists.logilab.org/mailman/listinfo/python-logic</A> 
              - <I>Python-logic</I>, a mailing list on logic and constraint-propagation 
              for Python, run by <A HREF="http://www.logilab.fr/">Logilab</A>. 
            </P>
            <P> <A HREF="http://www.logilab.org/">www.logilab.org/</A> - Logilab's 
              free software: programs include: <A HREF="http://www.logilab.org/projects/pyreverse">PyReverse</A> 
              for reverse-engineering Python; <A HREF="http://www.logilab.org/projects/pylint">PyLint</A> 
              for checking Python code; the <A HREF="http://www.logilab.org/projects/constraint">Constraint</A> 
              constraint-satisfaction system; <A HREF="http://www.logilab.org/projects/hmm">HMM</A> 
              for hidden Markov models; and <A HREF="http://www.logilab.org/projects/narval/">Narval</A>, 
              a language, interpreter, GUI and development environment for writing 
              intelligent personal assistants. </P>
            <P> <A HREF="http://christophe.delord.free.fr/en/pylog/pylogsrc.html">christophe.delord.free.fr/en/pylog/pylogsrc.html</A> 
              - <I>PyLog -- A first order logic library in Python</I>, by Christophe 
              Delord. He has two other Python projects: the <A HREF="http://christophe.delord.free.fr/en/tpg/index.html">Toy 
              Parser Generator</A> (used as PyLog's Prolog parser), and the <A HREF="http://christophe.delord.free.fr/en/popf/index.html">PopF</A> 
              spam filter. </P>
            <P> <A HREF="http://www.ntt.dis.titech.ac.jp/ICAIL2005/Paper02.pdf">www.ntt.dis.titech.ac.jp/ICAIL2005/Paper02.pdf</A> 
              - <I>An Integration of a Legal Knowledge Based System and a Content 
              Management System for a Legal Education Support System</I>, by Seiichiro 
              Sakurai and Hajime Yoshino, Meiji Gakuin University Graduate Law 
              School. Short paper about a method for teaching law via examples 
              of correct and incorrect legal inference from legal knowledge bases. 
              The paper does not explain well what this inference does or how 
              it would be used, but is interesting from a Python point of view 
              because it proposes PyLog Prolog for the inference engine, embedded 
              in a <A HREF="http://www.zope.org/">Zope</A>-based Web content-management 
              system. </P>
            <P> <A HREF="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/360698">aspn.activestate.com/ASPN/Cookbook/Python/Recipe/360698</A> 
              - <I>Extending python with prolog syntax *and resolution*</I>, by 
              Francisco Coelho. This recipe is based on Shai Berger's <A HREF="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/303057">aspn.activestate.com/ASPN/Cookbook/Python/Recipe/303057</A>, 
              <I>Pythologic -- Prolog syntax in Python</I>. </P>
            <P> <A HREF="http://lists.logilab.org/pipermail/python-logic/2005-May/000109.html">lists.logilab.org/pipermail/python-logic/2005-May/000109.html</A> 
              - <I>Rete in Python</I>. Posting by Nicolas Chauvat pointing to 
              <A HREF="http://www.mindswap.org/~katz/pychinko/"><I>Pychinko: Rete-based 
              RDF friendly rule engine</I></A> at www.mindswap.org/~katz/pychinko/. 
            </P>
            <P> <A HREF="http://www.cis.temple.edu/~ingargio/cis587/readings/rete.html">www.cis.temple.edu/~ingargio/cis587/readings/rete.html</A> 
              - <I>CIS587: The RETE Algorithm</I>, by Giorgio Ingargiola, Temple 
              University. See also the Wikipedia article at <A HREF="http://en.wikipedia.org/wiki/Rete_algorithm">en.wikipedia.org/wiki/Rete_algorithm</A>. 
            </P>
            <P> <A HREF="http://www.w3.org/2000/10/swap/doc/cwm">www.w3.org/2000/10/swap/doc/cwm</A> 
              - Cwm home page. See also <A HREF="http://infomesh.net/2001/cwm/">infomesh.net/2001/cwm/</A>. 
            </P>
            <P>&nbsp;</P>
            <H2><A NAME="open_automaton">Open Automaton</A></H2>
            <P> An open-source mobile domestic robot? That's the aim of the <A HREF="http://oap.sourceforge.net/index.php">Open 
              Automaton</A> project which I came across while preparing next month's 
              feature on Python and robotics. I may have more to say about Open 
              Automaton then - in the meantime, here's how they describe themselves 
              on their home page: 
            <BLOCKQUOTE> 
              <P> Moore's Law has allowed modern mass-produced PC hardware to 
                catch up with the demanding requirements of advanced vision processing 
                and artificial intelligence. Based on current state-of-the-art 
                PC mainboard technology, it is viable to build an intelligent 
                mobile robot with stereo vision, for the price of a good PC. </P>
              <P> This project aims to fill the gap between the powerful mobile 
                robot platforms typically used by researchers, and the small rug-roving 
                robots with limited processing power that are popular with hobbyists. 
                ... When it was first conceived, its scope was to include devising 
                a standard framework of hardware and software interfaces that 
                define the contracts between interconnected hardware and software 
                components. However, there are now at least two very serious efforts 
                underway towards this particular goal (the <a href='http://www.robo-etf.org'>RETF</a> 
                and the <a href='http://www.orocos.org'>OROCOS</a> project), as 
                well as some well implemented modular open source code for mobile 
                robots that arguably constitutes "de-facto" standards. So rather 
                than <i>re-invent the wheel</i>, the Open Automaton Project now 
                focuses on implementation rather than defining standards. Its 
                goals are: 
              <UL>
                <LI> 
                  <P> Design a coherent set of modular components (hardware and 
                    software) that conform to standards (where possible), and 
                    implement the functionality of an intelligent mobile robot. 
                    Use pre-built components that are readily available where 
                    possible (and when such pre-built components are affordable). 
                </LI>
                <p></P>
                <LI> 
                  <P> Minimize cost. It should be possible to build a robot for 
                    around the price of a PC (target: US$1,500 to $2,000). Consumer 
                    grade hardware components are to be used in preference to 
                    professional grade products. </P>
                </LI>
                <LI> 
                  <P> Focus on stereo vision as the primary spatial sensor to 
                    produce useful space occupancy data. Central to the success 
                    of this project is the implementation of a functioning low-cost 
                    real-time vision system. The prevalence of FireWire-enabled 
                    WebCams and mainboards makes this goal reachable from the 
                    standpoint of cost; the difficult part here is the software. 
                  </P>
                </LI>
              </UL>
              <p></P>
            </BLOCKQUOTE>
            <p></P>
            <H3><A NAME="open_automaton_links">Links</A></H3>
            <P> <A HREF="http://oap.sourceforge.net/index.php">oap.sourceforge.net/index.php</A> 
              - Open Automaton home page. </P>
            <P> <A HREF="http://www.openautomaton.org/community">www.openautomaton.org/community</A> 
              - Open Automaton Community site. </P>
            <P> <A HREF="http://linuxdevices.com/articles/AT8960820667.html">linuxdevices.com/articles/AT8960820667.html</A> 
              - <I>Meet OAP - an open robot reference design project</I>. Feature 
              about Open Automaton and its founder Dafydd Walters. </P>
            <P>&nbsp;</P>
            <H2><A NAME="squirrel">Common-sense Reasoning and the Anti-squirrel-nut-theft 
              Challenge</A></H2>
            <P> Yesterday, I happened to be half listening to <I>Gardeners' Question 
              Time</I> on Radio 4. For those living outside the UK, this is a 
              programme in which members of a studio audience parade their horticultural 
              woes before a panel of experts, seeking advice on such problems 
              as slugs, thrips, and lopsided monkey-puzzles. One lady explained 
              how she circumvents squirrels thieving nuts from her trees: she 
              stands wide pots of soft earth under the trees, then every few days 
              simply digs out and washes the nuts she finds buried in them. Squirrels, 
              apparently, tend to bury nuts near the tree from which they take 
              them. When an AI program can generate such an elegant piece of reasoning, 
              I shall be impressed. </P>
            <HR>
            <P>Past newsletters are available at either <A HREF="http://www.ddj.com">www.ddj.com</A> 
              or <A HREF="http://www.ainewsletter.com">www.ainewsletter.com</A>. 
              As ever, interesting links and ideas for future issues are very 
              welcome.</P>
            <P>Until next month, <br>
              Jocelyn &lt;popx@j-paine.org&gt;</P>
            <P>For questions about the <A HREF="http://www.ainewsletter.com">www.ainewsletter.com</A> 
              site, contact <a href="http://www.ainewsletter.com/contact.htm">Dennis 
              Merritt</a><br>
            </P>
            <p>Copyright &copy;2005 Amzi! inc., CMP, and Jocelyn Paine. All Rights 
              Reserved </p>
            <!-- #EndEditable --></td>
        </tr>
        <tr>
          <td>
            <div align="center"><i><font face="Arial, Helvetica, sans-serif" size="-2">Copyright 
              &copy;2002-04 <a href="http://www.amzi.com">Amzi! inc.</a> and <a href="http://www.ddj.com">CMP</a>. 
              All Rights Reserved.</font></i></div>
          </td>
        </tr>
      </table>
</td></tr></table>
</body>
<!-- #EndTemplate --></html>
