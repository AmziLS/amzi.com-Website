<html><!-- #BeginTemplate "/Templates/course.dwt" --><!-- DW6 -->
<head>
<link rel="stylesheet" type="text/css"
href="../../../../slides/course.css" />
<!-- #BeginEditable "doctitle" --> 
<title>Romanian Dolls</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF">
<h2 align="center"><font size="2"><i>Applying Logical Knowledge</i></font></h2>

<h1><img align="left" src="../../../../images/bullet.gif" width="36" height="36">&nbsp;

<!-- #BeginEditable "head" -->Romanian Dolls<!-- #EndEditable --></h1>
<hr>
<!-- #BeginEditable "body" --> 
<p>Russian dolls are the ones that nest within each other. At the center is a 
  wooden doll.</p>
<p>For these exercises, a Russian doll is represented as a(_). So it is a structure 
  with something in it. The wooden doll is represented by the atom 'a'. For example, 
  a triple nested doll looks like:</p>
<p><code>a(a(a(a)))</code></p>
<p>Write the following predicates:</p>
<p><em>a_test(-A)</em><br>
  A - a test doll with three dolls and the wooden doll in the last.<br>
  <span class="weak">hint: this is a simple fact.</span></p>
<pre>?- a_test(A).
A = a(a(a(a)))
yes</pre>
<p><em>a_count(+A,-N)</em><br>
  A - the input doll <br>
  N - the output count<br>
  <span class="weak">hint: use an accumulator and a second predicate a_count/3. 
  the boundary condition will be the wooden doll</span></p>
<pre>?- a_count(a, N).
N = 1
yes</pre>
<pre>?- a_test(A), a_count(A,N).
A = a(a(a(a)))
N = 4
yes</pre>
<p><em>a_nest(?A1, ?A2)</em><br>
  A1 - the outer nested dolls<br>
  A2 - the inner nested dolls <br>
  <span class="weak">hint: this is done with a simple fact that does it work through 
  unification.</span></p>
<pre>?- a_test(A), a_nest(A, A2).
A = a(a(a(a)))
A2 = a(a(a))
yes</pre>
<pre>?- a_test(A), a_nest(A2, A).
A = a(a(a(a)))
A2 = a(a(a(a(a))))
yes</pre>
<p><em>a_build(+N, -A)<br>
  </em>N - the number of levels of nesting. <br>
  A - the output doll, nested N deep. <br>
  <span class="weak">hint: do not use an accumulator. boundary condition is when 
  count is 1, and the answer then is the wooden doll. recursive calls recurse 
  to fill in building structure.</span></p>
<pre>?- a_build(1,A).
A = a
yes</pre>
<pre>?- a_build(5,A).
A = a(a(a(a(a))))
yes</pre>
<p>A Greek doll is just like a Russian doll, but is represented by the letter 
  b. This predicate makes a Greek copy to the same level of nesting as an input 
  Russian doll.</p>
<p><em>ab_copy(?A, ?B)</em> <br>
  A - a Russian doll, either input or out. <br>
  B - a Greek doll, either output or in. <br>
  <span class="weak">hint: simple recursion, no tricks.</span></p>
<pre>?- a_test(A), ab_copy(A,B).
A = a(a(a(a)))
B = b(b(b(b)))
yes</pre>
<p>We don't have to put the wooden doll in as the last thing. How about if we 
  can hide anything we want in the inner-most doll?</p>
<p><em>a_hide(+N, +PRIZE, -A)<br>
  </em>N - the number of nested dolls<br>
  PRIZE - the thing in the middle<br>
  A - the output doll<br>
  <span class="weak">hint: this might look like a_build, but isn't. you need an 
  accumulator that starts with the prize and wraps layers as it goes down. but 
  note that the second argument is that accumulator, seeded with the prize.</span></p>
<pre>?- a_hide(3, plum, A).
A = a(a(a(plum)))
yes</pre>
<p>note: when called with nesting of 0, there are no dolls, just the prize.</p>
<pre>?- a_hide(0, plum, A).
A = plum
yes</pre>
<p>Is it covered against run-away behavior on backtracking?</p>
<pre>?- a_hide(3, plum, A).
A = a(a(a(plum))) ;
no</pre>
<p><em>a_prize(+A, -PRIZE)</em> <br>
  A - some input doll <br>
  PRIZE- the thing hidden in the middle <br>
  <span class="weak">hint: keep peeling off layers and let the next call down 
  find the prize. the boundary condition is when A is not a doll, or when A \= 
  a(_).</span></p>
<pre>?- a_hide(3, plum, A), a_prize(A, PRIZE). A = a(a(a(plum))) PRIZE = plum yes</pre>
<h2>OPEN DOLLS</h2>
<p>Open is a technical term, meaning a structure with a variable in it that can 
  be filled at a later time by unification. Open dolls are dolls using this idea.</p>
<p>With the dolls so far, we need to dig to find the prize. What if we were to 
  keep open a shortcut to the inside? We could then access the inside directly.</p>
<p>We do this by using a slightly more complex data structure to represent the 
  doll. It has two related terms, one being the full doll, and the other being 
  the inside of the doll. They can be joined by the - operator for convenience. 
  It looks like:</p>
<p><code>a(a(a(plum)))-plum</code></p>
<p>With this structure representing the doll, we can write predicates that get 
  the plum directly, or peel the layers, as we please.</p>
<p>If we build an open doll with a variable inside, then we can fill the doll 
  later just by unifying that variable with the contents. So if we had</p>
<p><code>a(a(a(X)))-X</code></p>
<p>by setting X = plum, we also put plum in the middle of the doll.</p>
<pre>?- DOLL = a(a(a(X)))-X, X = plum.
DOLL = a(a(a(plum)))-plum
yes</pre>
<p>Here's some predicates that illustrate this point, using 'open structures', 
  or structures with a variable in them to begin with.</p>
<p><em>a_open_build(+N, -OA)<br>
  </em>N - the input level of nesting <br>
  OA - the open Russian doll <br>
  <span class="weak">hint: similar to a_build, but the boundary condition is when 
  N = 1, and the doll is a(X)-X. note: this is the hardest of the open doll predicates 
  to figure out.</span></p>
<pre>?- a_open_build(3, A).
A = a(a(a(H53))) - H53
yes</pre>
<p><em>a_open_hide(?OA, +PRIZE)</em> <br>
  OA - an input open doll, prefaced with? because, although input, it is changed 
  when its inner variable is unified. <br>
  PRIZE - the thing to put inside. <br>
  <span class="weak">hint: a simple fact that does the work with unification.</span></p>
<pre>?- a_open_build(3,A), a_open_hide(A,plum).
A = a(a(a(plum))) - plum
yes</pre>
<p>note: once you've put something in the open doll you can't put a different 
  thing in unless you backtrack over a_open_hide thus unbinding the variable:</p>
<pre>?- a_open_build(3,A), a_open_hide(A,plum), a_open_hide(A,peach).
no</pre>
<p><em>a_open_prize(+OA, -PRIZE)</em> <br>
  OA - an input open doll, probably with its inner prize unified. <br>
  PRIZE - the thing found inside. <br>
  <span class="weak">hint: the same predicate as a_open_hide.</span></p>
<pre>?- a_open_build(3,A), a_open_hide(A,plum), a_open_prize(A,P).
A = a(a(a(plum))) - plum
P = plum
yes</pre>
<h2>TURKISH DOLLS</h2>
<p>Turkish dolls are like Russian dolls, except they have two compartments. In 
  the left-hand one there can be anything, like an apple, pear, plum, or cherry. 
  The right is a special compartment that can only hold another turkish doll.</p>
<p>There is a wooden Turkish doll for the right side when there is no more nesting.</p>
<p>A Turkish doll is represent by the structure c/2. The wooden doll is represented 
  by c. Here is a nested turkish doll with four fruits in it.</p>
<p><code>c(apple, c(pear, c(plum, c(cherry, c))))</code></p>
<p><em>c_test(-C)<br>
  </em>C - a test doll from above.</p>
<pre>?- c_test(C).
C = c(apple,c(pear,c(plum,c(cherry,c))))
yes</pre>
<p><em>c_length(+C, -L)<br>
  </em>C - the input doll<br>
  L - the number of items in the doll<br>
  <span class="weak">hint: use an accumulator. the boundary condition is the wooden 
  doll, c.</span></p>
<pre>?- c_test(C), c_length(C,L).
C = c(apple,c(pear,c(plum,c(cherry,c))))
L = 4
yes</pre>
<p><em>c_write(+C)</em> <br>
  C - the input doll, whose things are to be written out. <br>
  <span class="weak">hint: keep writing what you see and recursing with what's 
  left.</span></p>
<pre>?- c_test(C), c_write(C).
apple pear plum cherry
C = c(apple,c(pear,c(plum,c(cherry,c))))
yes</pre>
<p><em>c_member(?ITEM, +C)</em> <br>
  ITEM - an item to look for, or variable which will take the value of items found. 
  <br>
  C - the input doll.</p>
<p>c_member can test if something is in a doll:</p>
<pre>?- c_test(C), c_member(pear, C).
C = c(apple,c(pear,c(plum,c(cherry,c))))
yes</pre>
<p>or generate on backtracking all of the items in a doll:</p>
<pre>?- c_test(C), c_member(X,C).
C = c(apple,c(pear,c(plum,c(cherry,c))))
X = apple ;
C = c(apple,c(pear,c(plum,c(cherry,c))))
X = pear ;
C = c(apple,c(pear,c(plum,c(cherry,c))))
X = plum ;
C = c(apple,c(pear,c(plum,c(cherry,c))))
X = cherry ; 
no</pre>
<p><em>c_reverse(+C, -CR)<br>
  </em>C - an input doll <br>
  CR - an output doll, with items in reverse order <br>
  <span class="weak">hint: use an accumulator to build the output doll, it will 
  be automatically reversed when it gets to the boundary condition.</span></p>
<pre>?- c_test(C), c_reverse(C, CR).
C = c(apple,c(pear,c(plum,c(cherry,c))))
CR = c(cherry,c(plum,c(pear,c(apple,c))))
yes</pre>
<p><em>c_append(?C1, ?C2, ?C)</em><br>
  C1 - a doll<br>
  C2 - another doll<br>
  C - a doll that is composed of C1's items followed by C2's items.<br>
  <span class="weak">hint: work from the head (thing) of C1, leaving C2 pretty 
  much alone. the boundary condition says if C1 is the wooden doll, then the answer, 
  C, is just C2.</span></p>
<p>here's c_append making a double length copy from two copies of the test case.</p>
<pre>?- c_test(C1), C2 = C1, c_append(C1,C2,C).
C1 = c(apple,c(pear,c(plum,c(cherry,c))))
C2 = c(apple,c(pear,c(plum,c(cherry,c))))
C = c(apple,c(pear,c(plum,c(cherry,c(apple,c(pear,c(plum,c(cherry,c))))))))
yes</pre>
<p>here's c_append splitting the test doll into all possible splittings.</p>
<pre>?- c_test(C), c_append(C1, C2, C).
C1 = c
C2 = c(apple,c(pear,c(plum,c(cherry,c)))) ;

C1 = c(apple,c)
C2 = c(pear,c(plum,c(cherry,c))) ;

C1 = c(apple,c(pear,c))
C2 = c(plum,c(cherry,c)) ;

C1 = c(apple,c(pear,c(plum,c)))
C2 = c(cherry,c) ;

C1 = c(apple,c(pear,c(plum,c(cherry,c))))
C2 = c ;
no</pre>
<h2>ROMANIAN DOLLS</h2>
<p>Romanian dolls are like Turkish dolls, except they have three compartments. 
  The first is for whatever thing might be there. The second and third are both 
  Romanian dolls. The second might have things less than the thing, and the third 
  might have things more than the thing.</p>
<p>In other words, a tree structure. If the nodes are left as variables, that 
  is, open, then they can be filled in later.</p>
<p>So for example this structure</p>
<p> <code>d(apple,L1,d(pear,d(cherry,L2,R2),d(plum,L3,R3)))</code></p>
<p>is the tree:</p>
<pre>
   apple
   /   \
  ?    pear
       /  \
   cherry plum
    / \   / \
   ?   ? ?   ?</pre>
<p>The ? are open variables, that can be filled in (unified) with new branches 
  of the tree.</p>
<p><em>d_test(-D)<br>
  </em>D - a test tree, the one above.</p>
<pre>?- d_test(D).
D = d(apple,H35,d(pear,d(cherry,H43,H44),d(plum,H47,H48)))
yes</pre>
<p><em>d_write(+D)<br>
  </em>D - a tree to display left to right <br>
  <span class="weak">hint: if the tree is a variable, then that's the end of a 
  branch. to test if X is a variable, use the built-in predicate var(X). the recursive 
  case writes out the left side first, then the thing, then the right side.</span></p>
<pre>?- d_test(D), d_write(D).
apple cherry pear plum
D = d(apple,H43,d(pear,d(cherry,H51,H52),d(plum,H55,H56)))
yes</pre>
<p><em>d_store(+ITEM, ?D)<br>
  </em>ITEM - a thing to put in the tree, in alphabetical sequence.<br>
  D - a growing open tree<br>
  <span class="weak">hint: the boundary condition simply creates a new tree node, 
  with the item as the thing in the node. there are two recursive cases, depending 
  on whether the item sorts higher or less than the thing in the node being examined. 
  use @&lt; and @&gt; to compare an item with the thing in the current node. note: 
  make sure you put a ! in the boundary case, to stop it from going wild unifying 
  variables with variables ad infinitum on backtracking.</span></p>
<p>use this predicate, d_loop/1 to test d_store/2.</p>
<pre>d_loop(D) :-
   write('item? '),
   read(ITEM),
   d_store(ITEM, D),
   ITEM \= quit,
   d_loop(D).
d_loop(D).</pre>
<pre>?- d_loop(D), d_write(D).
item? apple.
item? pear.
item? plum.
item? cherry.
item? quit.
apple cherry pear plum
D = d(apple,H89,d(pear,d(cherry,H480,H481),d(plum,H336,H337)))
yes</pre>
<p>&nbsp;</p>
<!-- #EndEditable --> 
<hr>
<p> <img align="right" src="../../../../images/logo_very_small.gif" width="125" height="35"> 
<a href="../../../../slides/index.htm"> <img src="../../../../images/home.gif" width="30" height="30" border="0"></a>
<!-- #BeginEditable "links" --><a href="ch_080_lists_020.htm"><img src="../images/previous.gif" width="30" height="30" border="0"></a> 
  <font size="3"><a href="ch_080_lists_040.htm"><img src="../images/next.gif" width="30" height="30" border="0"></a></font><!-- #EndEditable --> 
</p>
<h2 align="center"><font size="2"><i>Copyright &copy;2005 <a href="http://www.amzi.com/">Amzi! inc.</a></i></font></h2>
</body>
<!-- #EndTemplate --></html>
