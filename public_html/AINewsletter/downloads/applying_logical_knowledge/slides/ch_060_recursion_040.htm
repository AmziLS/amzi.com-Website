<html><!-- #BeginTemplate "/Templates/course.dwt" --><!-- DW6 -->
<head>
<link rel="stylesheet" type="text/css"
href="../../../../slides/course.css" />
<!-- #BeginEditable "doctitle" --> 
<title>Tail Recursion</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF">
<h2 align="center"><font size="2"><i>Applying Logical Knowledge</i></font></h2>

<h1><img align="left" src="../../../../images/bullet.gif" width="36" height="36">&nbsp;

<!-- #BeginEditable "head" -->Accumulator &amp; Tail Recursion<!-- #EndEditable --></h1>
<hr>
<!-- #BeginEditable "body" --> 
<p>If the last call is the recursive one, then Prolog can optimize 
  the call to not use a stack element. The trick is to keep the running total 
  and pass it down through the recursion, and then in the boundary condition, 
  unify it.</p>
<pre>factorial(1, F, F).

factorial(N, SOFAR, F) :-
   N &gt; 1,
   SOFAR2 is SOFAR * N,
   NN is N - 1,
   factorial(NN, SOFAR2, F).</pre>
<!-- #EndEditable --> 
<hr>
<p> <img align="right" src="../../../../images/logo_very_small.gif" width="125" height="35"> 
<a href="../../../../slides/index.htm"> <img src="../../../../images/home.gif" width="30" height="30" border="0"></a>
<!-- #BeginEditable "links" --><a href="ch_060_recursion_035.htm"><img src="../images/previous.gif" width="30" height="30" border="0"></a> 
  <font size="3"><a href="ch_060_recursion_900.htm"><img src="../images/next.gif" width="30" height="30" border="0"></a></font><!-- #EndEditable --> 
</p>
<h2 align="center"><font size="2"><i>Copyright &copy;2005 <a href="http://www.amzi.com/">Amzi! inc.</a></i></font></h2>
</body>
<!-- #EndTemplate --></html>
