<html><!-- #BeginTemplate "/Templates/customer_stories.dwt" --><!-- DW6 -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>YouBet.com Advances its eBusiness with Amzi!</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Mozilla/4.61 [en] (WinNT; I) [Netscape]">
<meta name="robots" content="all">
<!-- #BeginEditable "description" --> 
<meta name="description" content="">
<meta name="keywords" content="">
<!-- #EndEditable --></head>

<body bgcolor="#FFFFFF" text="#000000" link="#000099" vlink="#000033" alink="#990099">
<table border="0" cellpadding="0" width="100%">
  <tr> 
    <td width="100"><a href="/index.php"><img src="/images/logo_small.gif" border="0"></a></td>
    <td> 
      <h1 align="right"><font color="#999999"><i><!-- #BeginEditable "Title" --><font color="#666666">Customer 
        Stories </font><!-- #EndEditable --></i></font></h1>
    </td>
  </tr>
</table>
<!-- #BeginLibraryItem "/Library/menu_bar.lbi" --> <table border="0" cellspacing="0" cellpadding="0" height=34 WIDTH="100%" BGCOLOR="#000000"> 
<tr> <td height="1" WIDTH="100%"><img height="1" src="/images/spacer.gif"></td></tr> 
<tr> 
    <td height=34> <a href="http://www.amzi.com/products/index.htm" target="_top"><img src="/images/menu_productsservices.gif" width="93" height="34" border="0" alt="Products and Services"></a><a href="http://www.amzi.com/AmziNews/index.htm" target="_top"><img src="/images/menu_news.gif" width="98" height="34" border="0" alt="News and Mailing Lists" align="top"></a><a href="http://www.amzi.com/customers/index.htm" target="_top"><img src="/images/menu_customerstories.gif" width="82" height="34" border="0" alt="Customer Stories" align="top"></a><a href="http://www.amzi.com/articles/index.htm" target="_top"><img src="/images/menu_articleslinks.gif" width="88" height="34" border="0" alt="Articles and  Links" align="top"></a><a href="http://www.amzi.com/support/index.htm" target="_top"><img src="/images/menu_support.gif" width="83" height="34" border="0" alt="Support and Forums" align="top"></a><a href="http://www.amzi.com/search/index.htm" target="_top"><img src="/images/menu_searchsitemap.gif" width="88" height="34" border="0" alt="Search and Site Map" align="top"></a><a href="http://www.amzi.com/download/index.htm" target="_top"><img src="/images/menu_download.gif" width="79" height="34" border="0" align="top" alt="Download and Buy"></a><a href="http://www.amzi.com/company/index.php" target="_top"><img src="/images/menu_aboutamzi.gif" width="70" height="34" border="0" alt="Contact and About" align="top"></a></td>
  </tr><TR><TD HEIGHT="1"></TD></TR> 
</table>
<!-- #EndLibraryItem --><table border="0" cellspacing="0" cellpadding="4">
  <tr>
    <td width="108" bgcolor="#000000" align="left" valign="top"> 
      <p><br>
        <a href="index.htm"><img src="../images/commercial.gif" width="100" height="15" border="0" alt="Commercial"></a> 
      </p>
      <p><a href="education_government.htm"><img src="../images/educationgovernment.gif" width="100" height="30" alt="Education &amp; Government" border="0"></a></p>
      <p><a href="research.htm"><img src="../images/research.gif" width="100" height="15" alt="Research" border="0"></a></p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      </td>
    <td valign="top" align="left"><!-- #BeginEditable "Contents" --> 
      <p>&nbsp;</p>
      <h2 align="center"><font color="#666666">YouBet.com <br>
        Advances its eBusiness <br>
        with Amzi!</font></h2>
      <p><img src="youbet_logo.gif" width="160" height="95" align="right">There 
        are a number of emerging trends in eBusiness that can benefit from a departure 
        from procedural languages. Data interchange with disparate systems and 
        the increased sophistication and dependency on codifying business rules 
        are two areas presenting challenges that the Prolog language can address.  
      </p>
      <p>To illustrate the possibilities, lets see how Youbet.com has applied 
        Prolog in the advancement of its eBusiness strategy.  Along the way, we'll 
        also look at key learning's and considerations in applying Prolog to real-world 
        problems.</p>
      <h3><i>Data interchange with legacy systems</i></h3>
      <p>The strength of a typical eBusiness resides in its ability to connect 
        a variety of business systems directly to the end user.  This usually 
        requires a large amount of data interchange.  Typically, a proprietary 
        vendor record type is converted to a more useful form, perhaps XML.  A 
        challenge here lies in the time required to establish, test and deploy 
        the "glue" to interface the systems.  Also, frequent vendor upgrades or 
        the vendor's own XML initiative can create an ongoing maintenance burden 
        for the development team.  </p>
      <h3><i>Dependency on codifying business rules</i></h3>
      <p>Analytics is often described as the next revolution in internet technology.  
        In short, companies need to analyze their customer behavior and develop 
        "rules" to maximize revenue growth, loyalty and customer satisfaction.  
        From the proverbial business rule of "check credit limit" to more sophisticated 
        rules of "show customer related books of interest", business rules are 
        constantly changing and growing increasingly complex.</p>
      <p align=center style='text-align:center'>*          *          *</p>
      <p>What do these problems have in common?  They are both difficult to develop 
        and maintain with traditional programming languages. They are all ideal 
        applications for Prolog.  In fact, these applications are so suited to 
        representation in Prolog that they seem too simple.  This is our first 
        key learning:</p>
      <div style='border:solid windowtext .5pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'> 
        <p class=Learning><i>Use Prolog specifically where it excels: in the representation 
          of grammars, meta-grammars and rule-bases.  Graphical user interfaces 
          and time critical computations are examples of tasks that are usually 
          performed best by procedural languages.</i></p>
      </div>
      <h3><i>The problem domain</i></h3>
      <h4>About Youbet.com</h4>
      <p>Youbet.com provides a real-time racing and handicapping service for the 
        established horse racing customer.  The service provides live audio/video, 
        real-time information feeds and information products and derives its revenue 
        from subscription fees, information product sales, and where legal, live 
        wagering.  The service is available on the Internet through a web browser 
        or a standalone web-enabled CD based application.  </p>
      <p>Our challenge is to satisfy the needs of the racing enthusiast.  Whether 
        they be an owner, an established handicapper or a weekend player, they 
        want access to timely germane information about the races they are interested 
        in.  There is a wealth of information available, including: live odds, 
        late changes, audio/video, past performances, tip sheets and live commentary 
        from the track.  Our business depends on our ability to integrate all 
        this data and to combine it into an intelligent presentation for the user.</p>
      <h4>The Youbet architecture</h4>
      <p>Youbet uses an N-tier architecture to connect web browsers through a 
        session layer to application servers, vendor systems and databases.  Communication 
        between servers is typically done through messaging.  This allows us to 
        easily integrate the variety of application servers, vendor systems and 
        databases that our service depends on.</p>
      <p class=MsoCaption align="center"><img border=0 width=554 height=269
src="youbet_architecture.gif" v:shapes="_x0000_i1025"></p>
      <p class=MsoCaption><i>Figure 1 - N-tier architecture</i></p>
      <p>Vendor interchange, and codification of business rules are all implemented 
        through messaging middleware in the application tier.  A Java based application 
        server with an integrated Prolog rule base performs these functions.  
      </p>
      <p class=MsoCaption align="center"><img border=0 width=268 height=392
src="youbet_server_arch.gif" v:shapes="_x0000_i1026"></p>
      <p class=MsoCaption><i>Figure 2 - Application server architecture</i></p>
      <p>The process of interfacing a Prolog rule-base with Java is very straightforward 
        using a Prolog implementation such as Amzi! Prolog + Logic Server.  Once 
        the amzi.ls package is imported into your Java application, you can consult 
        Prolog files.  You can also extend or optimize Prolog by mapping Java 
        methods to extended predicates, which you call from your Prolog code. 
      </p>
      <h4>The application</h4>
      <p>Let's look at a scenario for this application server that involves data 
        interchange, and business rules:</p>
      <p>Receive live messages from a racetrack.  If the message contains race 
        results, update content on a web server<a
href="#_ftn1" name="_ftnref1" title="">[1]</a>.   </p>
      <p>Despite the simplicity of this example, the same techniques can be used 
        to provide a wide range of compelling user features.</p>
      <h3><i>The implementation</i></h3>
      <p>The scenario above is implemented as follows:</p>
      <ol start=1 type=1>
        <li>Another server sends a message containing live data from the racetrack</li>
        <li>The Java server receives the message and calls a method handler</li>
        <li>The foreign message is converted into a crude XML representation</li>
        <li>The XML is translated to a vendor agnostic XML format</li>
        <li>The message is processed according to business rules for the application 
          domain.  For example: <i>If this is an odds message, store the XML on 
          the web server</i>.  </li>
      </ol>
      <p>Steps 3, 4 &amp; 5 are performed in Prolog. </p>
      <h4>Program organization</h4>
      <p>While program organization is always important, it is critical in a hybrid 
        application  (i.e. Java and Prolog).  </p>
      <div style='border:solid windowtext .5pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'> 
        <p class=Learning><i>Developers seem to have difficulty thinking procedurally 
          and declaratively at the same time.  They must be able to work primarily 
          in one language at a time or productivity and quality will suffer.  
          </i></p>
      </div>
      <p>A good design allows the Prolog code to be tested directly in the listener, 
        in a hybrid test harness and in the final application.  This requires 
        a test framework and the ability to pump test messages from the listener, 
        test predicates, data files and the network.</p>
      <p>Figure 3 shows the relationship of key predicates. Lines represent dependencies 
        between predicates.  The ovals represent predicates that are stored in 
        the same file. The predicates responsible for steps 3, 4 &amp; 5 of the 
        scenario are also indicated.</p>
      <p class=MsoCaption align="center"><img border=0 width=292 height=178
src="youbet_prog_struct.gif" v:shapes="_x0000_i1027"></p>
      <p class=MsoCaption><i>Figure 3 - program structure</i></p>
      <p>The main processing is performed by the following predicates:</p>
      <p> 
        <blockquote>processMessage/1 - the main entry point from Java.  Unifies 
          an inbound message with side effects such as modifying the database 
          or sending other messages</blockquote>
      <p></p>
      <p> 
        <blockquote>sdl_rsx/2 - unify a message in the vendor (SDL) format with 
          its equivalent expressed as symbolic XML.</blockquote>
      <p></p>
      <p> 
        <blockquote>sdl/3 -the DCG representation of the SDL grammar, unifies 
          a difference list with a parse tree</blockquote>
      <p></p>
      <p> 
        <blockquote>rsx_sym/2 - unify raw symbolic XML with the normalized DTD 
          compliant XML</blockquote>
      <p></p>
      <p> 
        <blockquote>sym_xml/2 - unify any symbolic representation of XMLwith the 
          actual XML text</blockquote>
      <p></p>
      <p>The remaining 3 predicates implement a very flexible test harness.  They 
        are present in every file.  If your Prolog implementation supports name 
        spaces, this is very straightforward. </p>
      <p> 
        <blockquote>selfTest/0 - unifies with testSuite( <i>pattern</i>) for the 
          current file and selfTest for every file it depends on,<i> </i>where 
          <i>pattern</i> describes a subset of test cases.</blockquote>
      <p></p>
      <p> 
        <blockquote>testSuite/1 - unifies with all testCase's that are described 
          by <i>pattern</i>.</blockquote>
      <p></p>
      <p> 
        <blockquote>testCase/1 - A rule describing a specific test case and identified 
          by a unique term. A set of test cases is constructed for every predicate 
          in the file.  The test cases are expanded over time to form a regression 
          test suite. </blockquote>
      <p></p>
      <p>These predicates allow the developer to build a solid testable rule-base 
        without having to leave the Prolog environment.  The same test cases can 
        be executed in a hybrid test harness and the final application.  A comprehensive 
        regression test can be performed at any time. </p>
      <h4>Parsing</h4>
      <p>In steps 3 and 4, the central problem is parsing a foreign grammar.  
        This is a common class of problems at Youbet.com.  Before settling on 
        Prolog, we explored several other approaches.</p>
      <ul type=disc>
        <li>The traditional approach - Implement a state machine based parser 
          (perhaps using tools such as Lex and Yacc).</li>
        <li>The OOP approach - Implement a parser based on dissecting the grammar 
          into a class hierarchy.</li>
        <li>The AI approach - Implement a BNF style grammar using Prolog.</li>
      </ul>
      <table border=1 cellspacing=0 cellpadding=0>
        <tr> 
          <td width=129 bgcolor="maroon" class="Normal"> <i><b><font color="#FFFFFF">Approach</font></b></i></td>
          <td width=315 bgcolor="maroon" class="Normal"> <i><b><font color="#FFFFFF">Pros</font></b></i></td>
          <td width=330 bgcolor="maroon" class="Normal"> <i><b><font color="#FFFFFF">Cons</font></b></i></td>
        </tr>
        <tr> 
          <td width=129 valign=top bgcolor="#FFFFEF" class="Normal"> 
            <p><b><i>Traditional</i></b></p>
          </td>
          <td width=315 valign=top bgcolor="#FFFFEF" class="Normal"> 
            <ul>
              <li>Tools available (although limited for Java).</li>
              <li>Widely understood approach.</li>
            </ul>
          </td>
          <td width=330 valign=top bgcolor="#FFFFEF" class="Normal"> 
            <ul>
              <li>Lex/yacc not ideal for most vendor data formats because of the 
                separation of lexical analysis and parsing.</li>
              <li>Requires intermediate compilation step.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              </li>
              <li>Very difficult to maintain if state machine is coded directly.</li>
            </ul>
          </td>
        </tr>
        <tr> 
          <td width=129 valign=top bgcolor="#FFFFEF" class="Normal"> 
            <p><b><i>OOP</i></b></p>
          </td>
          <td width=315 valign=top bgcolor="#FFFFEF" class="Normal"> 
            <ul>
              <li> Fits in with typical OO architecture.</li>
            </ul>
          </td>
          <td width=330 valign=top bgcolor="#FFFFEF" class="Normal"> 
            <ul>
              <li> Large amount of similar code in each class<a href="#_ftn2" name="_ftnref2" title="">[2]</a>.</li>
              <li>Difficult to maintain.</li>
            </ul>
          </td>
        </tr>
        <tr> 
          <td width=129 valign=top bgcolor="#FFFFEF" class="Normal"> 
            <p><b><i>AI</i></b></p>
          </td>
          <td width=315 valign=top bgcolor="#FFFFEF" class="Normal"> 
            <ul>
              <li>Expression is very compact.</li>
              <li>Straightforward translation, DCG resembles the vendor specification.</li>
              <li>Easy to maintain.</li>
              <li>Bi-directional: test harnesses and 2-way interface are natural 
                by-product.</li>
              <li>Easy to supplement DCG with more complex parsing logic.</li>
            </ul>
          </td>
          <td width=330 valign=top bgcolor="#FFFFEF" class="Normal"> 
            <ul>
              <li> New territory for most applications software engineers (ASE's).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              </li>
              <li>IDE's tend to be less mature than their procedural counterparts.</li>
              <li>May not be suitable for high volume OLTP.</li>
            </ul>
          </td>
        </tr>
      </table>
      <p class=MsoCaption><i>Table 1- Comparison of parsing techniques</i></p>
      <p>Sdl_rsx converts a vendor message (character list) to a parse tree.  
        The vendor grammar is represented by a set of definite clause grammar 
        rules (DCG).  The DCG converts the vendor grammar into a parse tree.  
        By structuring the parse tree as follows, the conversion to XML is trivial:</p>
      <pre style='
'>     node -&gt; &lt;node name&gt;<sup>*</sup>, attributeList, nodeList | &lt;text&gt;<br>     attributeList -&gt; [attribute, .]<br>     nodeList -&gt; [node, .]<br>     attribute -&gt; &lt;attribute name&gt;*, &lt;attribute value&gt;</pre>
      <pre style='
'>* Expressed as a functor</pre>
      <p>For example, the XML:</p>
      <pre class=code>     &lt;odds track='AQUEDUCT' race='3' type='WIN'&gt;<br>          &lt;entry horse='1' value='3-2'/&gt;<br>          &lt;entry horse='2' value='5-1'/&gt;<br>     &lt;/odds&gt;</pre>
      <p>is equivalent to the following Prolog structure.</p>
      <pre class=code>     odds([track('AQUEDUCT'),race(3),type('WIN')],[<br>          entry([horse(1),value('3-2')],[]),<br>          entry([horse(1),value('3-2')],[])<br>     ])</pre>
      <p>This simplified structure can be easily extended to support the broader 
        XML specification.</p>
      <h4>Message translation</h4>
      <p>The previous step is most efficient if the process can be implemented 
        as a single-pass parser, with minimum backtracking.  However, the resultant 
        XML may not be ideal for the final stage of processing.  The vendor data 
        format may utilize keys or abbreviations that should be resolved.  It 
        may organize data in a non-intuitive way.  It may not identify records 
        of a specific type in a uniform format.  The data may also contain missing 
        or inaccurate data that can be corrected with appropriate heuristics.  
        Again, other approaches we explored before settling on Prolog:</p>
      <p> 
        <ul>
          <li>Hard code the logic in a procedural language - very difficult to 
            maintain.</li>
        </ul>
      <p></p>
      <p> 
        <ul>
          <li>Hard code the relationships, but store the parameters in the database 
            - provides a small amount of flexibility.  Any un-anticipated rules 
            require a costly re-architecture.</li>
        </ul>
      <p></p>
      <p> 
        <ul>
          <li>Express the logic in Prolog - ideal.  Complex rules can be easily 
            expressed, enhanced and maintained.  </li>
        </ul>
      <p></p>
      <div style='border:solid windowtext .5pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'> 
        <p class=Learning><i>The ability to add powerful heuristics is probably 
          one of the greatest benefits of this approach.</i></p>
      </div>
      <p>The data is transformed by developing a set of rules to describe these 
        abnormalities.  These rules are evaluated by rsx_sym.  The XML is already 
        represented as a Prolog structure.  It is a simple matter of symbolic 
        manipulation to convert this structure to a format compatible with a standard 
        DTD or to your own vendor agnostic DTD.  </p>
      <div style='border:solid windowtext .5pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'> 
        <p class=Learning>If you plan to resolve keys or abbreviations, it is 
          useful to use a Prolog implementation that can interface with a SQL 
          database.  Amzi! provides this capability through its ODBC Logic Server 
          Extension.  </p>
      </div>
      <h4>Representing business rules</h4>
      <p>In our application server, business rules effect change by sending messages 
        to other systems or by acting on the database directly.  In this case, 
        we send a message to a server that writes files to a web server.  Complex 
        rules that depend on multiple event conditions and/or database state changes 
        can be easily expressed. This higher order processing can take advantage 
        of the full range of Prolog constructs and is tailored to the problem 
        domain.  The "effects" of the rule can be implemented as extended predicates 
        in Java.</p>
      <p class=MsoBodyTextIndent>Another example of our use of business rules 
        is in the categorization of news feeds used to deliver germane, value-added 
        content. By doing this, we are able to personalize the user experience.  
        The rule here is:</p>
      <p class=MsoBodyTextIndent2> 
        <blockquote>Categorize articles by related players and teams, then deliver 
          these articles to users who are interested in these players and teams.</blockquote>
      <p></p>
      <p>Sports articles are received from a news wire service.  These "messages" 
        are converted into XML using the process described earlier.  At the completion 
        of step 4, the article is in a uniform symbolic representation.  Individual 
        words in the article are tokenized and represented as atoms.  The article 
        is then unified against a set of rules that look for common references 
        to specific players and teams.  Prolog facts describing players and teams 
        are stored in the SQL database so they are accessible throughout the system 
        and easily maintained.  As a final step, the articles are stored and cross 
        referenced in the database.</p>
      <p>Just as in message translation, a major benefit of the approach is the 
        ability to add new heuristics as the application evolves.  A natural progression 
        here would be: </p>
      <ol start=1 type=1>
        <li>Recognize only full player names and team names.</li>
        <li>Add the ability to recognize common nicknames and abbreviations. </li>
        <li>Recognize common misspellings, player trades and other complex relationships.</li>
      </ol>
      <div style='border:solid windowtext .5pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'> 
        <p class=Learning><i>Once the problem domain is better understood, consider 
          implementing a meta-grammar and interpreter/compiler for rule expression.  
          This will make it substantially easier for business analysts and ASEs 
          to maintain the rule base.</i></p>
      </div>
      <h3><i>Conclusion</i></h3>
      <p>It's hard to imagine a successful eBusiness that does not have a demand 
        for data interchange, or business rules.  The nature of these problems 
        presents opportunities for a Prolog rule-base embedded within a larger 
        application architecture.  </p>
      <p>Youbet.com has applied AI technology by developing a common architecture 
        and development approach that ties Prolog and messaging technology together 
        to provide a powerful problem solving tool in the application tier.  This 
        tool is gives us a solid foundation on which to build the business rules 
        essential to the success of our customer retention strategies.  New rules 
        can be easily incorporated without requiring significant re-work and with 
        the right meta-grammars we believe that the maintenance of many business 
        rules will be moved to less technical staff.  To date, we use Prolog to 
        integrate the data from 4 different vendors into our eBusiness presence 
        and many additional applications and enhancements are being considered.</p>
      <p>Using Prolog in a mixed language, distributed environment has also posed 
        special challenges.  Here are some of the issues that will need your consideration 
        before you can maximize the benefits from this approach: </p>
      <ul type=disc>
        <li>Problem type - Is the problem suited to a declarative language?  Do 
          performance constraints require predictably fast response?</li>
        <li>Skill set - Are your Application Software Engineers ready to think 
          declaratively?</li>
        <li>Tool selection - Does your Prolog implementation: provide a solid 
          IDE?  Does it interface with procedural languages?  Does it interface 
          with RDBMS?</li>
        <li>Developer productivity - How will you test your code during and after 
          development? Will developers be required to task switch between languages? 
          Will you develop a meta-language for describing business rules?</li>
      </ul>
      Douglas Tung serves as C.T.O. and Chief Architect of Youbet.com, the premier 
      online interactive horse racing experience. He can be reached at <a href="mailto:dwtung@yahoo.com">dwtung@yahoo.com</a>. 
      The Youbet website is <a href="http://www.youbet.com">http://www.youbet.com</a>. 
      <br clear=all>
      <hr align=left size=1 width="33%">
      <div id=ftn1> 
        <p class=MsoFootnoteText><a href="#_ftnref1"
name="_ftn1" title="">[1]</a> For the purpose of simplification, this example 
          has been modified from practice.</p>
      </div>
      <div id=ftn2> 
        <p class=MsoFootnoteText><a href="#_ftnref2"
name="_ftn2" title="">[2]</a>  For one modest grammar, the parser consisted of 
          over 100 code files, some representing trivial language elements.</p>
        <p class=MsoFootnoteText><i>This story was originally published in the 
          Mar/Apr 2001 issue of PC AI Magazine. The magazine can be reached at 
          PC AI, 3310 West Bell Rd., Suite 119, Phoenix AZ, USA 85023 Tel: (602) 
          971-1869, FAX: (602) 971-2321, E-Mail: info@pcai.com, Web: http://www.pcai.com</i></p>
      </div>
      <!-- #EndEditable --></td>
  </tr>
</table>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-8213130-1");
pageTracker._trackPageview();
} catch(err) {}</script></BODY>
<!-- #EndTemplate --></html>
