<html><!-- #BeginTemplate "/Templates/customer_stories.dwt" --><!-- DW6 -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>Office Practicum Ensures Timely and Correct Vaccinations with Amzi! and Delphi</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Mozilla/4.61 [en] (WinNT; I) [Netscape]">
<meta name="robots" content="all">
<!-- #BeginEditable "description" --> 
<meta name="description" content="">
<meta name="keywords" content="">
<!-- #EndEditable --></head>

<body bgcolor="#FFFFFF" text="#000000" link="#000099" vlink="#000033" alink="#990099">
<table border="0" cellpadding="0" width="100%">
  <tr> 
    <td width="100"><a href="/index.php"><img src="/images/logo_small.gif" border="0"></a></td>
    <td> 
      <h1 align="right"><font color="#999999"><i><!-- #BeginEditable "Title" --><font color="#666666">Customer 
        Stories</font><!-- #EndEditable --></i></font></h1>
    </td>
  </tr>
</table>
<!-- #BeginLibraryItem "/Library/menu_bar.lbi" --> <table border="0" cellspacing="0" cellpadding="0" height=34 WIDTH="100%" BGCOLOR="#000000"> 
<tr> <td height="1" WIDTH="100%"><img height="1" src="/images/spacer.gif"></td></tr> 
<tr> 
    <td height=34> <a href="http://www.amzi.com/products/index.htm" target="_top"><img src="/images/menu_productsservices.gif" width="93" height="34" border="0" alt="Products and Services"></a><a href="http://www.amzi.com/AmziNews/index.htm" target="_top"><img src="/images/menu_news.gif" width="98" height="34" border="0" alt="News and Mailing Lists" align="top"></a><a href="http://www.amzi.com/customers/index.htm" target="_top"><img src="/images/menu_customerstories.gif" width="82" height="34" border="0" alt="Customer Stories" align="top"></a><a href="http://www.amzi.com/articles/index.htm" target="_top"><img src="/images/menu_articleslinks.gif" width="88" height="34" border="0" alt="Articles and  Links" align="top"></a><a href="http://www.amzi.com/support/index.htm" target="_top"><img src="/images/menu_support.gif" width="83" height="34" border="0" alt="Support and Forums" align="top"></a><a href="http://www.amzi.com/search/index.htm" target="_top"><img src="/images/menu_searchsitemap.gif" width="88" height="34" border="0" alt="Search and Site Map" align="top"></a><a href="http://www.amzi.com/download/index.htm" target="_top"><img src="/images/menu_download.gif" width="79" height="34" border="0" align="top" alt="Download and Buy"></a><a href="http://www.amzi.com/company/index.php" target="_top"><img src="/images/menu_aboutamzi.gif" width="70" height="34" border="0" alt="Contact and About" align="top"></a></td>
  </tr><TR><TD HEIGHT="1"></TD></TR> 
</table>
<!-- #EndLibraryItem --><table border="0" cellspacing="0" cellpadding="4">
  <tr>
    <td width="108" bgcolor="#000000" align="left" valign="top"> 
      <p><br>
        <a href="index.htm"><img src="../images/commercial.gif" width="100" height="15" border="0" alt="Commercial"></a> 
      </p>
      <p><a href="education_government.htm"><img src="../images/educationgovernment.gif" width="100" height="30" alt="Education &amp; Government" border="0"></a></p>
      <p><a href="research.htm"><img src="../images/research.gif" width="100" height="15" alt="Research" border="0"></a></p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      </td>
    <td valign="top" align="left"><!-- #BeginEditable "Contents" --> 
      <h2 align="center"><font color="#666666"><br>
        Office Practicum<br>
        Ensures Timely and Correct Vaccinations<br>
        with Amzi! and Delphi</font></h2>
      <p><a href="http://www.visualdatallc.com/"><img src="visualdata_logo.gif" width="144" height="78" align="right" border="0"></a>Visual 
        Data LLC provides a Windows software product called Office Practicum for 
        pediatrician's offices. It keeps medical records for patients and performs 
        all of the &quot;data&quot; and &quot;processing&quot; functions you might 
        expect.</p>
      <p>One of the items it tracks for a patient is vaccination history. It turns 
        out that one of the problems for a pediatrician is following all of the 
        complex rules and regulations for vaccinations, and scheduling children 
        for future appointments based on their vaccination needs.</p>
      <p>Customers asked Visual Data to provide a feature in Office Practicum 
        that would tell what vaccinations were up-to-date for a child on a visit, 
        and which were due. It should also be able to provide reports on each 
        child analyzing their vaccination histories, making sure they were in 
        compliance with regulations for schools and summer camps. This took Visual 
        Data into the realm of encoding logical knowledge. The knowledge about 
        vaccinations is published in papers made available by the CDC. Each vaccine 
        has one or more schedules of doses, based on the particular type of vaccine, 
        and each has numerous exception rules that describe conditions when a 
        vaccination may or may not be given.<br>
      </p>
      <p>There are a number of interesting observations to be made about this 
        application.<br>
      </p>
      <h3>Data and Process First, then Logic<br>
      </h3>
      <p>The first relates to the Stanford comment about AI in medicine, which 
        was that AI had not advanced due to the lack of data. They observed that 
        AI is really the encoding of logical relationships, but, without entities 
        for the logical knowledge to reason over, there is no practical value 
        in automating the logic. The vaccination program illustrates this.</p>
      <p>People in the past have worked on AI systems to automate vaccination 
        logic, but the patient data on vaccination history was not readily available. 
        It had to be typed in by hand as input to the system in order to get a 
        vaccination schedule. However, any medical practitioner experienced in 
        vaccinations could figure out the schedule directly from the data in about 
        the same time without having to engage a computer in the process. So there 
        wasn't much point.<br>
      </p>
      <p>Office Practicum provides enough help in the day-to-day business of running 
        a pediatricians office to make the data collection on patient histories 
        comes naturally. Because that data is in the computer, and because the 
        office is already using the computer for other aspects of managing the 
        patient, it now makes sense to automate the logical knowledge for vaccination 
        scheduling. In fact, it was the customers who started to ask for this 
        feature, after using the software. They noted that all the vaccination 
        information was in the computer, so why couldn't it automatically generate 
        the vaccination schedules.<br>
      </p>
      <h3>Procedural Code Works, but is Impractical<br>
      </h3>
      <p><a href="vaccine_screen.jpg"><img src="vaccine_screen_small.jpg" width="392" height="234" border="0" align="right"></a>Visual 
        Data first attacked the problem by attempting to encode the vaccination 
        logic using procedural code. In their case the application is developed 
        in Borland's Delphi, and they used Pascal for the encoding. The software 
        worked, but was difficult to write, and was in a large complex module, 
        and only provided some of the features they wanted to provide. <br>
      </p>
      <p>However, the world of vaccines kept changing. New vaccines were coming 
        out that combined earlier vaccines in a single vaccination with new more 
        complex rules about the interactions between the components. Customers 
        wanted to know when the software would support Pediatrix, a new complex 
        multi-disease vaccine. The software developers groaned.<br>
      </p>
      <p>While they were a Delphi shop, and familiar with Delphi, and would love 
        to do all their work in Delphi, they realized the vaccination module was 
        just too difficult to maintain, so they opted for a logic base solution. 
        The logic base reduced the code size from thousands of lines of code to 
        hundreds of lines of easily understandable rules. It was the same 10:1 
        ratio seen so many times for these applications.<br>
      </p>
      <p>Further, the rules were now in a format that their resident pediatrician, 
        not a programmer, could understand. The application was restructured so 
        that the Delphi code called the logic base, much the same way it called 
        the database. The &quot;knowledge&quot; of vaccination scheduling was 
        now completely outside of the core Delphi code. The logic base can be 
        updated without affecting the main application, just as the database can 
        be updated without changing the application.<br>
      </p>
      <p>Unlike the database, the logic base must be tested, and Office Practicum 
        uses a tool set to independently test the rules. Regression tests are 
        a part of the system, so that various scenarios can be automatically retested 
        when changes are made to the logic base.<br>
      </p>
      <h3>The Nature of Vaccine Logical Knowledge<br>
      </h3>
      <p>Visual Data did not use an off-the-shelf rule engine for a couple of 
        reasons. One was cost, but more important, the logical knowledge of vaccines 
        seemed to require its own specific set of ways to represent knowledge. 
        Here are the types of logical knowledge expressed in the vaccination documents.</p>
      <h4>Definitions<br>
      </h4>
      <p>First there are definitions, such as the fact that there are two types 
        of Hib vaccines, those that contain PRP-OMP and those that don't. A different 
        schedule is used for each. There are also many brands of Hib vaccines, 
        and many abbreviations doctors use for a Hib vaccine. It is important 
        to know for each whether it contains PRP-OMP or not.<br>
      </p>
      <p>Another critical fact to know about a vaccine is if it contains live 
        virus or not. There are rules concerned with the spacing of such vaccines.<br>
      </p>
      <p>Additionally, there are multi-vaccine products, such as a combined measles, 
        mumps and rubella (MMR) vaccine. There are rules that are just concerned 
        with, for example, whether or not a child had a measles vaccine, but the 
        database might indicate MMR.<br>
      </p>
      <h4>Tables<br>
      </h4>
      <p>Standard tables provide the minimum age, recommended age, and minimum 
        spacing interval for each dose of a vaccine. If this was all there was 
        to the vaccination logic, then a database solution or other table lookup 
        would have worked, although even the tables aren't that simple. For a 
        given vaccine, different tables apply depending on factors such as whether 
        it is a multi-vaccine, what the active components are, and whether or 
        not the child has followed a standard schedule.<br>
      </p>
      <p>For example, Hib has multiple tables based on when the series of Hib 
        vaccinations is started.<br>
      </p>
      <h4>Rules<br>
      </h4>
      <p>Finally, there are the rules. The rules work in concert with the definitions 
        and the tables. They are used to determine which table is appropriate 
        in a given situation. They also provide coverage for all the exception 
        cases, such as the fact that a given vaccine isn't necessary after a certain 
        age, or that a schedule can't be kept if other live virus vaccines have 
        been given, or what the corrective measures are if a previous vaccine 
        was given earlier than allowed.<br>
      </p>
      <h3>A Custom Solution Provides for All Three<br>
      </h3>
      <p>While all of this information could be stored in rules, some of the visual 
        clarity of the mapping from documentation to logic base would be lost. 
        It would be better if the logic base more readily expressed the definitions.<br>
      </p>
      <p>Accordingly the knowledge representation language for the vaccination 
        system was designed to have</p>
      <ul>
        <li>An ontology of terms to store definitions.</li>
        <li>A means of entering tabular knowledge.</li>
        <li>A means of entering rules.<br>
        </li>
      </ul>
      <p>This made it easy to add new definitions without affecting the rules, 
        allowed for the direct encoding of the basic tables, and enabled the rules 
        to refer to the tables and reason with concepts such as the last live 
        virus vaccination.<br>
      </p>
      <p>It is the ontology that lets that type of rule use the term 'live virus,' 
        when the actual data is composed of dates and specific vaccine names used 
        by the office staff. The ontology was also the key to dealing with vaccines 
        that covered multiple diseases. If a rule needed to refer to the last 
        measles vaccination, yet the data referred to MMR, the ontology would 
        recognize that MMR was a kind of measles vaccine. </p>
      <h3>Date and Sequence Reasoning</h3>
      <p>There was another wrinkle in the vaccination logic. Almost all of the 
        rules and tables used date intervals and ages, in any of the units: year, 
        month, week, or day. For example, the minimum age for the second dose 
        of Hib (without PRP-OMP) is 10 weeks, the minimum spacing from the previous 
        Hib vaccination is 4 weeks, and the recommended age is 4 months. Notice 
        that this requires being able to work with the child's age in weeks and 
        months, and to be able measure the spacing between vaccinations in weeks. 
        There is no consistency in the tables, and each can use any of the date 
        units.<br>
      </p>
      <p>The database, as you might expect, contains the actual dates when past 
        vaccinations were given and the date of birth.<br>
      </p>
      <p>The ability to reason and manipulate dates, ages and date intervals, 
        as required, is not a common feature in commercial rule languages. In 
        the Delphi code they had converted everything to days, but this created 
        problems for practitioners when a vaccine was allowed four months later 
        but Jan 15th plus four months didn't produce the result May 15th. It also 
        made the code more obtuse to read and understand.<br>
      </p>
      <p>So the rule language for the vaccination system was designed to have 
        full knowledge of various date entities and how to manipulate them. A 
        rule could directly reference an entity such as: vaccination(last, measles) 
        &lt; 1 years, and the system would look at the last vaccination, get its 
        date, and know &quot;1 years&quot; meant an age, which it would convert 
        to a date so the comparison could be made.<br>
      </p>
      <p>The rules could then express concepts such as:<br>
      </p>
      <blockquote> 
        <p>The minimum date for the next measles vaccination is the maximum of 
          either the birth date plus the minimum age from the table or the date 
          of the last live virus vaccination plus four weeks.</p>
      </blockquote>
      <p>This highlights another need for customization. Sequences of vaccinations 
        are key, so the system needed an easy way to refer to the first vaccination 
        or last, or count the number of vaccinations. Again, the language was 
        designed to make it easy to express and reason over sequences of events.<br>
      </p>
      <h3>Modularization<br>
      </h3>
      <p>Modularization was a key requirement for this application. The tables 
        and rules for each vaccine were kept in separate modules. The ontology, 
        on the other hand, was in a common module as it was used by all the other 
        modules.<br>
      </p>
      <h3>Reasoning Engine<br>
      </h3>
      <p>The reasoning engine for the vaccine logic base is designed to meet a 
        variety of application needs. It takes as input the vaccination history 
        of a child and then goes to the module for each vaccine in question and 
        gets the status information for that vaccine. This includes an analysis 
        of the past vaccinations with that vaccine; the status as of today, the 
        current office visit; and the recommended range and minimum dates for 
        the next vaccination with that vaccine.<br>
      </p>
      <p>Each module is designed with the same goal and output, and that goal 
        is called by the reasoning engine. This allows for the easy addition of 
        different vaccines, and the easy maintenance of any particular vaccine.<br>
      </p>
      <p>The reasoning engine has an application program interface (API) that 
        is used by the calling application. The API provides the various reports 
        required for different uses. For example, it can tell what vaccines need 
        to be given on the day of an office visit, or what vaccines will be needed 
        for scheduling a follow-up visit. It also allows for short and verbose 
        reporting and explanations of the recommendations, and provides the historical 
        analysis reporting required for camp and school forms.<br>
      </p>
      <h3>Text File Logic Base<br>
      </h3>
      <p>The first version of the Vaccine logic base uses a text file for the 
        rules. The rules are based on the Prolog syntax which allowed for quick 
        implementation of the knowledge representation language, as well as providing 
        a full test and debugging framework for the logic base.<br>
      </p>
      <p>Future plans include a more free form syntax and GUI editing tools. Here 
        are some examples of the various elements of the logic base.<br>
      </p>
      <h4>Ontology<br>
      </h4>
      <p>Here are the entries indicating Varicella and Small Pox are live viruses; 
        the three elements of the new Pediarix vaccine; various spellings of Hib; 
        and some of the PRP-OMP flavors of Hib. This is a 'is-a' hierarchy of 
        terms, so a rule referring to Hib will correctly match the vaccine PedvaxHIB&#153;, 
        because it 'is-a' PRP-OMP, and PRP-OMP 'is-a' Hib.<br>
      </p>
      <blockquote> 
        <pre><font color="#000080">live_virus -&gt;&gt; 'Varicella'.
live_virus -&gt;&gt; 'Small Pox'.</font></pre>
        <pre><font color="#000080">'DTaP-HepB-IPV+' -&gt;&gt; 'Pediarix(tm)'.</font></pre>
        <pre><font color="#000080">'Hib' -&gt;&gt; 'HbOC'.
'Hib' -&gt;&gt; 'PRP-OMP'.
'Hib' -&gt;&gt; 'PRP-T'.</font></pre>
        <pre><font color="#000080">'PRP-OMP' -&gt;&gt; 'PRP-OMP &amp; Hep B'.
'PRP-OMP' -&gt;&gt; 'PedvaxHIB(TM)'.
'PRP-OMP' -&gt;&gt; 'HIB-OMP'.</font></pre>
      </blockquote>
      <h4>Tables<br>
      </h4>
      <p>The vaccine logic base is used to report on vaccines that can be given 
        at a given visit, and to forecast vaccines needed in the future. There 
        is both a minimum and recommended age for the forecast vaccines. These 
        are reflected in the table entries that provide for the minimum age of 
        a dose, the minimum separation required from the previous dose, and the 
        recommended age for a dose.<br>
      </p>
      <p>Here's the table in the Hib module for Hib vaccines that contain PRP-OMP.<br>
      </p>
      <blockquote> 
        <pre><font color="#000080">table('Recommended B', [
   % Recommended Schedule B from 'DHS Hib 2003Mar' for vaccines
   % containing PRP-OMP
   % Dose Minimum Minimum Recommended
   % Age Spacing Age
   [ 1, 6 weeks, none, 2 months ],
   [ 2, 10 weeks, 4 weeks, 4 months ],
   [ 3, 12 months, 8 weeks, 15 months ] ]).</font></pre>
      </blockquote>
      <h4>Rules<br>
      </h4>
      <p>The rules use patterns in the data to determine the status of a particular 
        vaccination, deciding whether or not to use a table and how to qualify 
        the results from the table if necessary.<br>
      </p>
      <p>Here's a status rule in the Hib module that defers to late_start_status 
        rules if the child has had 2 valid Hib vaccines and the second one was 
        given after 7 months of age. (Other rules will have previously examined 
        the past history and determined which vaccines were given at valid times.)<br>
      </p>
      <blockquote> 
        <pre><font color="#000080">status :-
   valid_count('Hib') gte 2,
   vaccination(2, 'Hib') *&gt;= 7 months,
   !,
   late_start_status.</font></pre>
      </blockquote>
      <p>A rule that generates output usually has three parts: the conditions 
        under which the rule applies; the calculations for status and dates; the 
        storing of key information about the vaccine.<br>
      </p>
      <p>For example, a rule in the MMR module has:<br>
      </p>
      <p><b>Conditions</b> - There have been measles vaccinations and there have 
        been more than one live virus vaccination given.<br>
      </p>
      <blockquote> 
        <pre><font color="#000080">valid_count('Measles') eq Count,
valid_count(live_virus) gt 0,</font></pre>
      </blockquote>
      <p><b>Calculations</b> - The next dose is one more than the current count 
        and the table of MMWR recommendations is used to get the minimum age and 
        recommended age for the next vaccination. The actual dates are based on 
        either the table recommendations or the separation from the last live 
        virus vaccination, which ever is greater. The status for today is calculated 
        based on those dates, using a utility that is part of the reasoning engine. 
        <br>
      </p>
      <blockquote> 
        <pre><font color="#000080">NextDose is Count + 1,
   get_row('M-M-R':'MMWR Recommended', [NextDose, MinAge, _, RecAge, _]),
   MinDate *= maximum( vaccination(last,live_virus) + 4 weeks, 
      birthday + MinAge),
   RecDate1 *= maximum( vaccination(last,live_virus) + 4 weeks, 
      birthday + lower(RecAge)),
   RecDate2 *= maximum( vaccination(last,live_virus) + 4 weeks, 
      birthday + upper(RecAge)),
   calc_status(MinDate, RecDate1, RecDate2, Status),</font></pre>
      </blockquote>
      <p> <b>Output</b> - The dates, the status, the citation and verbose explanation.</p>
      <blockquote> 
        <pre><font color="#000080">output('M-M-R', [
   dose = NextDose,
   dates = [MinDate, RecDate1, RecDate2],
   rec_info = RecAge,
   status = Status,
   citation = 'MMWR 2002Feb08', 
   note = [
      `Next dose based on standard schedule, guaranteeing at `,
      `least 4 weeks separation from last live virus vaccination.`]]).</font></pre>
      </blockquote>
      <h3>Cost Benefit<br>
      </h3>
      <p>The benefits from the logic base approach has been:<br>
      </p>
      <ul>
        <li>a 90% reduction in code used for vaccine logic rules,</li>
        <li>direct access to the knowledge by the in-house pediatrician,</li>
        <li>localization of all the vaccine logic, which used to be scattered 
          in the different parts of the application with different needs,</li>
        <li>easy maintenance, and quality assurance testing, and</li>
        <li>additional capabilities that were too hard to encode before, such 
          as the complete analysis of past vaccination history and support for 
          new multi-vaccine products.</li>
      </ul>
      <p>All of these benefits add up to the one major benefit, which is that 
        their software now provides better services for their customers in this 
        area which is critically important in the running of a pediatric office.<br>
      </p>
      <p>The costs were:<br>
      </p>
      <ul>
        <li> time spent investigating and learning about various alternative approaches 
          for encoding the vaccination logic,</li>
        <li>software license fees,</li>
        <li>two month's development time, and</li>
        <li>time spent learning the new technology.<br>
        </li>
      </ul>
      <p>The calendar time for the project was:<br>
      </p>
      <ul>
        <li> January - start study of alternative approaches,</li>
        <li>March - begin application development,</li>
        <li>June - deploy to the field.<br>
        </li>
      </ul>
      <h3>Future Plans<br>
      </h3>
      <p>The development environment provides tools for testing and debugging 
        the logic base, but uses text files for the various modules. The structure 
        of the various logical knowledge entities would map nicely to a graphical 
        development environment, and this is planned as a future project.<br>
      </p>
      <p>Now that the logic base is a separate unit, it can be deployed and used 
        in different contexts. Visual Data is considering offering the history 
        analysis portions of the vaccine logic base on the Web using a .NET architecture.</p>
      <h2><a href="http://www.visualdatallc.com/"><img src="officepracticum_logo.gif" width="458" height="78" border="0"></a></h2>
      <p></p>
      <!-- #EndEditable --></td>
  </tr>
</table>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-8213130-1");
pageTracker._trackPageview();
} catch(err) {}</script></BODY>
<!-- #EndTemplate --></html>
